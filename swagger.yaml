openapi: 3.0.2
info:
  description: <p>This is a prototypical implementation of a RBAC Profile in SCIM. Find more about SCIM, <a href="https://datatracker.ietf.org/doc/html/rfc7642"> RFC7642 SCIM Overview</a>, <a href="https://datatracker.ietf.org/doc/html/rfc7643"> RFC7643 SCIM data model</a>, <a href="https://datatracker.ietf.org/doc/html/rfc7644"> RFC7644 SCIM Protocol</a>. It enhances the SCIM Core definition about RBAC (Role Based Access Control). The profile adds thus Roles, Entitlements, Accounts, Applications, Sessions and SoDs (Separation of Duties).</p>
    <p>Use Cases might include application provisioning, add-on software for IdM systems for role modelling, access reviews or SoD firewalls.</p>
    <p>This is research project and highlights an advanced SCIM API design. We hope to contribute with this design to current efforts to expose RBAC data in SCIM.</p>
  title: A RBAC Profile for SCIM - OpenAPI 3.0
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
externalDocs:
  description: Find out more about SCIM
  url: https://datatracker.ietf.org/doc/html/rfc7642
servers:
  - url: /api/v3
tags:
  - name: User
    description: 'HTTP methods with User resource(s)'
    externalDocs:
      description: 'Full user documentation @'
      url: 'https://datatracker.ietf.org/doc/html/rfc7643'
  - name: Group
    description: 'HTTP methods with Group resource(s)'
    externalDocs:
      description: 'Full group documentation @'
      url: 'https://datatracker.ietf.org/doc/html/rfc7643'
  - name: Role
    description: 'HTTP methods with Role resource(s)'
  - name: Entitlement
    description: 'HTTP methods with Entitlement resource(s)'
  - name: Account
    description: 'HTTP methods with Account resource(s)'
  - name: Application
    description: 'HTTP methods with Application resource(s)'
  - name: SoD
    description: 'HTTP methods with SoD resource(s)'
    externalDocs:
      description: 'Full SoD documentation @'
      url: 'https://profsandhu.com/cs5323_s17/sandhu-1998.pdf'
  - name: Session
    description: 'HTTP methods with Session resource(s)'
    externalDocs:
      description: 'Full session documentation @'
      url: 'https://profsandhu.com/cs5323_s17/sandhu-1998.pdf'
  - name: Utility
    description: 'Utility endpoints mentioned across the SCIM RFC family'
    externalDocs:
      description: 'Documentation @'
      url: 'https://datatracker.ietf.org/doc/html/rfc7644'
  - name: Configuration
    description: 'HTTP methods with Configuration resource(s)'
    externalDocs:
      description: 'Full Configuration documentaion @'
      url: 'https://www.rfc-editor.org/rfc/rfc7644.html#section-4'
paths:
  /Users/.search:
    post:
      tags:
        - User
      summary: Get filtered or all Users
      description: This endpoint returns all or filtered Users. Utilize the request body (SearchRequest) parameters to configure filtering, sorting, pagination and in-/excluded attribues. After receiving an HTTP POST request, a response is returned as specified in [Section 3.4.2 of RFC7644](https://datatracker.ietf.org/doc/html/rfc7644#section-3.4.2).
      operationId: searchUsers
      requestBody:
        description: 'SearchRequest with the required parameters'
        content:
          application/scim+json:
            schema: 
              $ref: '#/components/schemas/SearchRequest'
      responses:
        '200':
          description: 'Success - list of all Users'
          content:
            application/scim+json:
              schema:
                  $ref: '#/components/schemas/UserListResponse'
        '307':
          description: 'Temporary redirect - Use the provided URI for the next request, but not permanently'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '308':
          description: 'Permanent redirect - Use the provided URI for the next request permanently'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '400':
          description: 'Bad request - See scimType for further information'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: 'Unauthorized - Authentication failed try again with a valid authentication'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: 'Forbidden - Authentication was successful but the user is not authorized'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: 'Not found - No resource with provided Id'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: 'Internal server error - Implementers provide a descriptive debugging advice'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '501':
          description: 'Not implemented - Service provider does not support the request'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - rbac_scim_auth:
            - read:users
  /Users:
    post:
      tags:
        - User
      summary: Create new user resource
      description: Creates a new User. Some attributes might be immutable, thus make sure these are set correctly for creation. Unset required attributes might lead to assertions or insertion of default values. Readonly attributes are ignored. The query parameters attribues and excludedAttributes refer to the response upon success. The id attributes is set by the Service Provider to ensure uniqueness.
      operationId: createUser
      parameters:
        - in: query
          name: attributes
          schema:
            type: string
            example: id,groups,roles,accounts
          description: A multi-valued list of strings indicating the names of resource attributes to return in the response, overriding the set of attributes that would be returned by default.  Attribute names MUST be in standard attribute notation (see [Section 3.10 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.10)) form. See [Section 3.9 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.9) for additional retrieval query parameters.
        - in: query
          name: excludedAttributes
          schema:
            type: string
            example: schema,meta
          description: A multi-valued list of strings indicating the names of resource attributes to be removed from the default set of attributes to return.  This parameter SHALL have no effect on attributes whose schema \"returned\" setting is \"always\" (see Sections [2.2](https://www.rfc-editor.org/rfc/rfc7644#section-2.2) and [7](https://www.rfc-editor.org/rfc/rfc7644#section-7) of RFC7644).  Attribute names MUST be in standard attribute notation ([Section 3.10 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.10)) form.  See [Section 3.9 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.9) for additional retrieval query parameters.
      requestBody:
        description: 'Content to create new user resource'
        content:
          application/scim+json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: 'Success - User created'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/User'
        '307':
          description: 'Temporary redirect - Use the provided URI for the next request, but not permanently'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '308':
          description: 'Permanent redirect - Use the provided URI for the next request permanently'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '400':
          description: 'Bad request - See scimType for further information'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: 'Unauthorized - Authentication failed try again with a valid authentication'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: 'Forbidden - Authentication was successful but the user is not authorized'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: 'Not found - No resource with provided Id'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: 'Conflict - Outdated version number or refusal of Service Provider to create a duplicate'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: 'Internal server error - Implementers provide a descriptive debugging advice'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '501':
          description: 'Not implemented - Service provider does not support the request'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - rbac_scim_auth:
            - create:users
    get:
      tags:
        - User
      summary: Get filtered or all Users
      description: This endpoint returns all or filtered Users. Utilize the query parameters to configure filtering, sorting, pagination and in-/excluded attribues.
      operationId: getUsers
      parameters:
        - in: query
          name: filter
          schema:
            type: string
            example: filter=meta.lastModified gt "2011-05-13T04:42:34Z"
          description: Service providers may support filtering upon their resources. [Section 3.4.2.2 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.4.2.2) gives an overview on creating logical expressions for fitering. It includes attributes operators (eq, ne, co, sw, etc.), logical operators (and, or, not), grouping operators (for precedence or attribute filters), and expressing paths.
        - in: query
          name: sortBy
          schema:
            type: string
            example: id
          description: The \"sortBy\" parameter specifies the attribute whose value SHALL be used to order the returned responses.  If the \"sortBy\" attribute corresponds to a singular attribute, resources are sorted according to that attribute's value; if it's a multi-valued attribute, resources are sorted by the value of the primary attribute (see [Section 2.4 of RFC7643](https://www.rfc-editor.org/rfc/rfc7643#section-2.4)), if any, or else the first value in the list, if any.  If the attribute is complex, the attribute name must be a path to a sub-attribute in standard attribute notation (see [Section 3.10 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.10)), e.g., \"sortBy=name.givenName\". For all attribute types, if there is no data for the specified \"sortBy\" value, they are sorted via the \"sortOrder\" parameter, i.e., they are ordered last if ascending and first if descending.'
        - in: query
          name: sortOrder
          schema:
            type: string
            example: descending
            default: ascending
            enum:
              - ascending
              - descending
          description: The order in which the \"sortBy\" parameter is applied. Allowed values are \"ascending\" and \"descending\".  If a value for \"sortBy\" is provided and no \"sortOrder\" is specified, \"sortOrder\" SHALL default to ascending.  String type attributes are case insensitive by default, unless the attribute type is defined as a case-exact string.  \"sortOrder\" MUST sort according to the attribute type; i.e., for case-insensitive attributes, sort the result using case-insensitive Unicode alphabetic sort order with no specific locale implied, and for case-exact attribute types, sort the result using case-sensitive Unicode alphabetic sort order.
        - in: query
          name: startIndex
          schema:
            type: integer
            example: 2313
            default: 1
          description: The 1-based index of the first query result. A value less than 1 SHALL be interpreted as 1.
        - in: query
          name: count
          schema:
            type: integer
            example: 10
            default: 1000
          description: Non-negative integer. Specifies the desired maximum number of query results per page, e.g., 10. A negative value SHALL be interpreted as \"0\". A value of \"0\" indicates that no resource results are to be returned except for \"totalResults\". 
        - in: query
          name: attributes
          schema:
            type: string
            example: id,groups,roles,accounts
          description: A multi-valued list of strings indicating the names of resource attributes to return in the response, overriding the set of attributes that would be returned by default.  Attribute names MUST be in standard attribute notation (see [Section 3.10 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.10)) form. See [Section 3.9 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.9) for additional retrieval query parameters.
        - in: query
          name: excludedAttributes
          schema:
            type: string
            example: schema,meta
          description: A multi-valued list of strings indicating the names of resource attributes to be removed from the default set of attributes to return.  This parameter SHALL have no effect on attributes whose schema \"returned\" setting is \"always\" (see Sections [2.2](https://www.rfc-editor.org/rfc/rfc7644#section-2.2) and [7](https://www.rfc-editor.org/rfc/rfc7644#section-7) of RFC7644).  Attribute names MUST be in standard attribute notation ([Section 3.10 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.10)) form.  See [Section 3.9 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.9) for additional retrieval query parameters.
      responses:
        '200':
          description: 'Success - list of all Users'
          content:
            application/scim+json:
              schema:
                  $ref: '#/components/schemas/UserListResponse'
        '307':
          description: 'Temporary redirect - Use the provided URI for the next request, but not permanently'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '308':
          description: 'Permanent redirect - Use the provided URI for the next request permanently'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '400':
          description: 'Bad request - See scimType for further information'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: 'Unauthorized - Authentication failed try again with a valid authentication'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: 'Forbidden - Authentication was successful but the user is not authorized'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: 'Not found - No resource with provided Id'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: 'Internal server error - Implementers provide a descriptive debugging advice'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '501':
          description: 'Not implemented - Service provider does not support the request'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - rbac_scim_auth:
            - read:users
  /Users/{id}:
    get:
      tags:
        - User
      summary: Get user by Id
      description: Finds a single User by its id attribute. Returned attributes might be specified or restricted with the query parameter attributes or excludedAttributes. Some attributes might not be readable according their schema definition.
      operationId: getUserById
      parameters:
        - name: id
          in: path
          description: Reference to the resouce which should be queried
          required: true
          schema:
            type: string
            format: uuid
        - in: query
          name: attributes
          schema:
            type: string
            example: id,groups,roles,accounts
          description: A multi-valued list of strings indicating the names of resource attributes to return in the response, overriding the set of attributes that would be returned by default.  Attribute names MUST be in standard attribute notation (see [Section 3.10 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.10)) form. See [Section 3.9 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.9) for additional retrieval query parameters.
        - in: query
          name: excludedAttributes
          schema:
            type: string
            example: schema,meta
          description: A multi-valued list of strings indicating the names of resource attributes to be removed from the default set of attributes to return.  This parameter SHALL have no effect on attributes whose schema \"returned\" setting is \"always\" (see Sections [2.2](https://www.rfc-editor.org/rfc/rfc7644#section-2.2) and [7](https://www.rfc-editor.org/rfc/rfc7644#section-7) of RFC7644).  Attribute names MUST be in standard attribute notation ([Section 3.10 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.10)) form.  See [Section 3.9 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.9) for additional retrieval query parameters.
      responses:
        '200':
          description: 'Success - User found'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/User'
        '307':
          description: 'Temporary redirect - Use the provided URI for the next request, but not permanently'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '308':
          description: 'Permanent redirect - Use the provided URI for the next request permanently'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '400':
          description: 'Bad request - See scimType for further information'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: 'Unauthorized - Authentication failed try again with a valid authentication'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: 'Forbidden - Authentication was successful but the user is not authorized'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: 'Not found - No resource with provided Id'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: 'Internal server error - Implementers provide a descriptive debugging advice'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '501':
          description: 'Not implemented - Service provider does not support the request'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - rbac_scim_auth:
            - read:users
    put:
      tags:
        - User
      summary: Update user by Id
      description: Updates a present User. Unset required attributes might lead to assertions or insertion of default values. Readonly attributes are ignored. The query parameters attribues and excludedAttributes refer to the response upon success.
      operationId: updateUserById
      parameters:
        - name: id
          in: path
          description: Reference to the resouce which requires an update
          required: true
          schema:
            type: string
            format: uuid
        - in: query
          name: attributes
          schema:
            type: string
            example: id,groups,roles,accounts
          description: A multi-valued list of strings indicating the names of resource attributes to return in the response, overriding the set of attributes that would be returned by default.  Attribute names MUST be in standard attribute notation (see [Section 3.10 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.10)) form. See [Section 3.9 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.9) for additional retrieval query parameters.
        - in: query
          name: excludedAttributes
          schema:
            type: string
            example: schema,meta
          description: A multi-valued list of strings indicating the names of resource attributes to be removed from the default set of attributes to return.  This parameter SHALL have no effect on attributes whose schema \"returned\" setting is \"always\" (see Sections [2.2](https://www.rfc-editor.org/rfc/rfc7644#section-2.2) and [7](https://www.rfc-editor.org/rfc/rfc7644#section-7) of RFC7644).  Attribute names MUST be in standard attribute notation ([Section 3.10 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.10)) form.  See [Section 3.9 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.9) for additional retrieval query parameters.
      requestBody:
        description: 'Content for updating an existent user by Id'
        content:
          application/scim+json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: 'Success - User updated'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/User'
        '307':
          description: 'Temporary redirect - Use the provided URI for the next request, but not permanently'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '308':
          description: 'Permanent redirect - Use the provided URI for the next request permanently'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '400':
          description: 'Bad request - See scimType for further information'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: 'Unauthorized - Authentication failed try again with a valid authentication'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: 'Forbidden - Authentication was successful but the user is not authorized'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: 'Not found - No resource with provided Id'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: 'Conflict - Outdated version number or refusal of Service Provider to create a duplicate'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '412':
          description: 'Precondition failed - Failed to update. Resource has changed on the server.'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: 'Internal server error - Implementers provide a descriptive debugging advice'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '501':
          description: 'Not implemented - Service provider does not support the request'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - rbac_scim_auth:
            - update:users
    patch:
      tags:
        - User
      summary: Update user value(s) by User Id
      description: Updates selected attributes of a present User. Readonly attributes are ignored. The query parameters attribues and excludedAttributes refer to the response upon success. Invalid or non-existent attribute paths and invalid values lead to a HTTP status code 400 with a scimType containing the error type.  
      operationId: patchUserById
      parameters:
        - name: id
          in: path
          description: Reference to the resouce which requires an update
          required: true
          schema:
            type: string
            format: uuid
        - in: query
          name: attributes
          schema:
            type: string
            example: id,groups,roles,accounts
          description: A multi-valued list of strings indicating the names of resource attributes to return in the response, overriding the set of attributes that would be returned by default.  Attribute names MUST be in standard attribute notation (see [Section 3.10 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.10)) form. See [Section 3.9 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.9) for additional retrieval query parameters.
        - in: query
          name: excludedAttributes
          schema:
            type: string
            example: schema,meta
          description: A multi-valued list of strings indicating the names of resource attributes to be removed from the default set of attributes to return.  This parameter SHALL have no effect on attributes whose schema \"returned\" setting is \"always\" (see Sections [2.2](https://www.rfc-editor.org/rfc/rfc7644#section-2.2) and [7](https://www.rfc-editor.org/rfc/rfc7644#section-7) of RFC7644).  Attribute names MUST be in standard attribute notation ([Section 3.10 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.10)) form.  See [Section 3.9 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.9) for additional retrieval query parameters.
      requestBody:
        description: 'Content for updating an existent user by Id'
        content:
          application/scim+json:
            schema:
              $ref: '#/components/schemas/PatchOp'
      responses:
        '200':
          description: 'Success - User value(s) updated'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/User'
        '307':
          description: 'Temporary redirect - Use the provided URI for the next request, but not permanently'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '308':
          description: 'Permanent redirect - Use the provided URI for the next request permanently'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '400':
          description: 'Bad request - See scimType for further information'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: 'Unauthorized - Authentication failed try again with a valid authentication'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: 'Forbidden - Authentication was successful but the user is not authorized'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: 'Not found - No resource with provided Id'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: 'Conflict - Outdated version number or refusal of Service Provider to create a duplicate'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '412':
          description: 'Precondition failed - Failed to update. Resource has changed on the server.'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: 'Internal server error - Implementers provide a descriptive debugging advice'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '501':
          description: 'Not implemented - Service provider does not support the request'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - rbac_scim_auth:
            - update:users
    delete:
      tags:
        - User
      summary: Delete user by Id
      description: Deletes a present User. For subsequent requests on that resource and after successful deletion, a HTTP status code 404 is returned. 
      operationId: deleteUserByID
      parameters:
        - name: id
          in: path
          description: Reference to the resouce which should be deleted
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: 'Success - User deleted'
        '307':
          description: 'Temporary redirect - Use the provided URI for the next request, but not permanently'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '308':
          description: 'Permanent redirect - Use the provided URI for the next request permanently'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '400':
          description: 'Bad request - See scimType for further information'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: 'Unauthorized - Authentication failed try again with a valid authentication'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: 'Forbidden - Authentication was successful but the user is not authorized'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: 'Not found - No resource with provided Id'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: 'Conflict - Outdated version number or refusal of Service Provider to create a duplicate'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '412':
          description: 'Precondition failed - Failed to update. Resource has changed on the server.'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: 'Internal server error - Implementers provide a descriptive debugging advice'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '501':
          description: 'Not implemented - Service provider does not support the request'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - rbac_scim_auth:
            - delete:users
  /Groups/.search:
    post:
      tags:
        - Group
      summary: Get filtered or all Groups
      description: This endpoint returns all or filtered Groups. Utilize the request body (SearchRequest) parameters to configure filtering, sorting, pagination and in-/excluded attribues. After receiving an HTTP POST request, a response is returned as specified in [Section 3.4.2 of RFC7644](https://datatracker.ietf.org/doc/html/rfc7644#section-3.4.2).
      operationId: searchGroups
      requestBody:
        description: 'SearchRequest with the required parameters'
        content:
          application/scim+json:
            schema: 
              $ref: '#/components/schemas/SearchRequest'
      responses:
        '200':
          description: 'Success - list of all Groups'
          content:
            application/scim+json:
              schema:
                  $ref: '#/components/schemas/GroupListResponse'
        '307':
          description: 'Temporary redirect - Use the provided URI for the next request, but not permanently'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '308':
          description: 'Permanent redirect - Use the provided URI for the next request permanently'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '400':
          description: 'Bad request - See scimType for further information'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: 'Unauthorized - Authentication failed try again with a valid authentication'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: 'Forbidden - Authentication was successful but the user is not authorized'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: 'Not found - No resource with provided Id'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: 'Internal server error - Implementers provide a descriptive debugging advice'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '501':
          description: 'Not implemented - Service provider does not support the request'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - rbac_scim_auth:
            - read:groups
  /Groups:
    post:
      tags:
        - Group
      summary: Create new group resource
      description: Creates a new Group. Some attributes might be immutable, thus make sure these are set correctly for creation. Unset required attributes might lead to assertions or insertion of default values. Readonly attributes are ignored. The query parameters attribues and excludedAttributes refer to the response upon success. The id attributes is set by the Service Provider to ensure uniqueness.
      operationId: createGroup
      parameters:
        - in: query
          name: attributes
          schema:
            type: string
            example: id,members
          description: A multi-valued list of strings indicating the names of resource attributes to return in the response, overriding the set of attributes that would be returned by default.  Attribute names MUST be in standard attribute notation (see [Section 3.10 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.10)) form. See [Section 3.9 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.9) for additional retrieval query parameters.
        - in: query
          name: excludedAttributes
          schema:
            type: string
            example: schema,meta
          description: A multi-valued list of strings indicating the names of resource attributes to be removed from the default set of attributes to return.  This parameter SHALL have no effect on attributes whose schema \"returned\" setting is \"always\" (see Sections [2.2](https://www.rfc-editor.org/rfc/rfc7644#section-2.2) and [7](https://www.rfc-editor.org/rfc/rfc7644#section-7) of RFC7644).  Attribute names MUST be in standard attribute notation ([Section 3.10 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.10)) form.  See [Section 3.9 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.9) for additional retrieval query parameters.
      requestBody:
        description: 'Content to create new group resource'
        content:
          application/scim+json:
            schema:
              $ref: '#/components/schemas/Group'
      responses:
        '201':
          description: 'Success - Group created'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Group'
        '307':
          description: 'Temporary redirect - Use the provided URI for the next request, but not permanently'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '308':
          description: 'Permanent redirect - Use the provided URI for the next request permanently'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '400':
          description: 'Bad request - See scimType for further information'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: 'Unauthorized - Authentication failed try again with a valid authentication'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: 'Forbidden - Authentication was successful but the user is not authorized'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: 'Not found - No resource with provided Id'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: 'Conflict - Outdated version number or refusal of Service Provider to create a duplicate'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: 'Internal server error - Implementers provide a descriptive debugging advice'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '501':
          description: 'Not implemented - Service provider does not support the request'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - rbac_scim_auth:
          - create:groups
    get:
      tags:
        - Group
      summary: Get filtered or all Groups
      description: This endpoint returns all or filtered Groups. Utilize the query parameters to configure filtering, sorting, pagination and in-/excluded attribues.
      operationId: getGroups
      parameters:
        - in: query
          name: filter
          schema:
            type: string
            example: filter=meta.lastModified gt "2011-05-13T04:42:34Z"
          description: Service providers may support filtering upon their resources. [Section 3.4.2.2 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.4.2.2) gives an overview on creating logical expressions for fitering. It includes attributes operators (eq, ne, co, sw, etc.), logical operators (and, or, not), grouping operators (for precedence or attribute filters), and expressing paths.
        - in: query
          name: sortBy
          schema:
            type: string
            example: id
          description: The \"sortBy\" parameter specifies the attribute whose value SHALL be used to order the returned responses.  If the \"sortBy\" attribute corresponds to a singular attribute, resources are sorted according to that attribute's value; if it's a multi-valued attribute, resources are sorted by the value of the primary attribute (see [Section 2.4 of RFC7643](https://www.rfc-editor.org/rfc/rfc7643#section-2.4)), if any, or else the first value in the list, if any.  If the attribute is complex, the attribute name must be a path to a sub-attribute in standard attribute notation (see [Section 3.10 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.10)), e.g., \"sortBy=name.givenName\". For all attribute types, if there is no data for the specified \"sortBy\" value, they are sorted via the \"sortOrder\" parameter, i.e., they are ordered last if ascending and first if descending.'
        - in: query
          name: sortOrder
          schema:
            type: string
            example: descending
            default: ascending
            enum:
              - ascending
              - descending
          description: The order in which the \"sortBy\" parameter is applied. Allowed values are \"ascending\" and \"descending\".  If a value for \"sortBy\" is provided and no \"sortOrder\" is specified, \"sortOrder\" SHALL default to ascending.  String type attributes are case insensitive by default, unless the attribute type is defined as a case-exact string.  \"sortOrder\" MUST sort according to the attribute type; i.e., for case-insensitive attributes, sort the result using case-insensitive Unicode alphabetic sort order with no specific locale implied, and for case-exact attribute types, sort the result using case-sensitive Unicode alphabetic sort order.
        - in: query
          name: startIndex
          schema:
            type: integer
            example: 2313
            default: 1
          description: The 1-based index of the first query result. A value less than 1 SHALL be interpreted as 1.
        - in: query
          name: count
          schema:
            type: integer
            example: 10
            default: 1000
          description: Non-negative integer. Specifies the desired maximum number of query results per page, e.g., 10. A negative value SHALL be interpreted as \"0\". A value of \"0\" indicates that no resource results are to be returned except for \"totalResults\". 
        - in: query
          name: attributes
          schema:
            type: string
            example: id,members
          description: A multi-valued list of strings indicating the names of resource attributes to return in the response, overriding the set of attributes that would be returned by default.  Attribute names MUST be in standard attribute notation (see [Section 3.10 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.10)) form. See [Section 3.9 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.9) for additional retrieval query parameters.
        - in: query
          name: excludedAttributes
          schema:
            type: string
            example: schema,meta
          description: A multi-valued list of strings indicating the names of resource attributes to be removed from the default set of attributes to return.  This parameter SHALL have no effect on attributes whose schema \"returned\" setting is \"always\" (see Sections [2.2](https://www.rfc-editor.org/rfc/rfc7644#section-2.2) and [7](https://www.rfc-editor.org/rfc/rfc7644#section-7) of RFC7644).  Attribute names MUST be in standard attribute notation ([Section 3.10 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.10)) form.  See [Section 3.9 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.9) for additional retrieval query parameters.
      responses:
        '200':
          description: 'Success - list of all Group'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/GroupListResponse'
        '307':
          description: 'Temporary redirect - Use the provided URI for the next request, but not permanently'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '308':
          description: 'Permanent redirect - Use the provided URI for the next request permanently'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '400':
          description: 'Bad request - See scimType for further information'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: 'Unauthorized - Authentication failed try again with a valid authentication'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: 'Forbidden - Authentication was successful but the user is not authorized'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: 'Not found - No resource with provided Id'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: 'Internal server error - Implementers provide a descriptive debugging advice'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '501':
          description: 'Not implemented - Service provider does not support the request'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - rbac_scim_auth:
          - read:groups
  /Groups/{id}:
    get:
      tags:
        - Group
      summary: Get group by Id
      description: Finds a single Group by its id attribute. Returned attributes might be specified or restricted with the query parameter attributes or excludedAttributes. Some attributes might not be readable according their schema definition.
      operationId: getGroupById
      parameters:
        - name: id
          in: path
          description: Reference to the resouce which should be queried
          required: true
          schema:
            type: string
            format: uuid
        - in: query
          name: attributes
          schema:
            type: string
            example: id,members
          description: A multi-valued list of strings indicating the names of resource attributes to return in the response, overriding the set of attributes that would be returned by default.  Attribute names MUST be in standard attribute notation (see [Section 3.10 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.10)) form. See [Section 3.9 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.9) for additional retrieval query parameters.
        - in: query
          name: excludedAttributes
          schema:
            type: string
            example: schema,meta
          description: A multi-valued list of strings indicating the names of resource attributes to be removed from the default set of attributes to return.  This parameter SHALL have no effect on attributes whose schema \"returned\" setting is \"always\" (see Sections [2.2](https://www.rfc-editor.org/rfc/rfc7644#section-2.2) and [7](https://www.rfc-editor.org/rfc/rfc7644#section-7) of RFC7644).  Attribute names MUST be in standard attribute notation ([Section 3.10 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.10)) form.  See [Section 3.9 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.9) for additional retrieval query parameters.
      responses:
        '200':
          description: 'Success - Group found'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Group'
        '307':
          description: 'Temporary redirect - Use the provided URI for the next request, but not permanently'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '308':
          description: 'Permanent redirect - Use the provided URI for the next request permanently'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '400':
          description: 'Bad request - See scimType for further information'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: 'Unauthorized - Authentication failed try again with a valid authentication'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: 'Forbidden - Authentication was successful but the user is not authorized'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: 'Not found - No resource with provided Id'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: 'Internal server error - Implementers provide a descriptive debugging advice'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '501':
          description: 'Not implemented - Service provider does not support the request'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - rbac_scim_auth:
          - read:groups
    put:
      tags:
        - Group
      summary: Update group by Id
      description: Updates a present Group. Unset required attributes might lead to assertions or insertion of default values. Readonly attributes are ignored. The query parameters attribues and excludedAttributes refer to the response upon success.
      operationId: updateGroupById
      parameters:
        - name: id
          in: path
          description: Reference to the resouce which requires an update
          required: true
          schema:
            type: string
            format: uuid
        - in: query
          name: attributes
          schema:
            type: string
            example: id,members
          description: A multi-valued list of strings indicating the names of resource attributes to return in the response, overriding the set of attributes that would be returned by default.  Attribute names MUST be in standard attribute notation (see [Section 3.10 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.10)) form. See [Section 3.9 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.9) for additional retrieval query parameters.
        - in: query
          name: excludedAttributes
          schema:
            type: string
            example: schema,meta
          description: A multi-valued list of strings indicating the names of resource attributes to be removed from the default set of attributes to return.  This parameter SHALL have no effect on attributes whose schema \"returned\" setting is \"always\" (see Sections [2.2](https://www.rfc-editor.org/rfc/rfc7644#section-2.2) and [7](https://www.rfc-editor.org/rfc/rfc7644#section-7) of RFC7644).  Attribute names MUST be in standard attribute notation ([Section 3.10 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.10)) form.  See [Section 3.9 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.9) for additional retrieval query parameters.
      requestBody:
        description: 'Content for updating an existing group by Id'
        content:
          application/scim+json:
            schema:
              $ref: '#/components/schemas/Group'
      responses:
        '200':
          description: 'Success - Group updated'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Group'
        '307':
          description: 'Temporary redirect - Use the provided URI for the next request, but not permanently'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '308':
          description: 'Permanent redirect - Use the provided URI for the next request permanently'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '400':
          description: 'Bad request - See scimType for further information'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: 'Unauthorized - Authentication failed try again with a valid authentication'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: 'Forbidden - Authentication was successful but the user is not authorized'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: 'Not found - No resource with provided Id'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: 'Conflict - Outdated version number or refusal of Service Provider to create a duplicate'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '412':
          description: 'Precondition failed - Failed to update. Resource has changed on the server.'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: 'Internal server error - Implementers provide a descriptive debugging advice'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '501':
          description: 'Not implemented - Service provider does not support the request'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - rbac_scim_auth:
          - update:groups
    patch:
      tags:
        - Group
      summary: Update group value(s) by Group Id
      description: Updates selected attributes of a present Group. Readonly attributes are ignored. The query parameters attribues and excludedAttributes refer to the response upon success. Invalid or non-existent attribute paths and invalid values lead to a HTTP status code 400 with a scimType containing the error type.  
      parameters:
        - name: id
          in: path
          description: Reference to the resouce which requires an update
          required: true
          schema:
            type: string
            format: uuid
        - in: query
          name: attributes
          schema:
            type: string
            example: id,members
          description: A multi-valued list of strings indicating the names of resource attributes to return in the response, overriding the set of attributes that would be returned by default.  Attribute names MUST be in standard attribute notation (see [Section 3.10 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.10)) form. See [Section 3.9 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.9) for additional retrieval query parameters.
        - in: query
          name: excludedAttributes
          schema:
            type: string
            example: schema,meta
          description: A multi-valued list of strings indicating the names of resource attributes to be removed from the default set of attributes to return.  This parameter SHALL have no effect on attributes whose schema \"returned\" setting is \"always\" (see Sections [2.2](https://www.rfc-editor.org/rfc/rfc7644#section-2.2) and [7](https://www.rfc-editor.org/rfc/rfc7644#section-7) of RFC7644).  Attribute names MUST be in standard attribute notation ([Section 3.10 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.10)) form.  See [Section 3.9 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.9) for additional retrieval query parameters.
      requestBody:
        description: 'Content for updating an existent role by Id'
        content:
          application/scim+json:
            schema:
              $ref: '#/components/schemas/PatchOp'
      responses:
        '200':
          description: 'Success - Group value(s) updated'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Group'
        '307':
          description: 'Temporary redirect - Use the provided URI for the next request, but not permanently'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '308':
          description: 'Permanent redirect - Use the provided URI for the next request permanently'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '400':
          description: 'Bad request - See scimType for further information'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: 'Unauthorized - Authentication failed try again with a valid authentication'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: 'Forbidden - Authentication was successful but the user is not authorized'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: 'Not found - No resource with provided Id'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: 'Conflict - Outdated version number or refusal of Service Provider to create a duplicate'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '412':
          description: 'Precondition failed - Failed to update. Resource has changed on the server.'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: 'Internal server error - Implementers provide a descriptive debugging advice'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '501':
          description: 'Not implemented - Service provider does not support the request'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - rbac_scim_auth:
          - update:groups
    delete:
      tags:
        - Group
      summary: Delete group by Id
      description: Deletes a present Group. For subsequent requests on that resource and after successful deletion, a HTTP status code 404 is returned. 
      operationId: deleteGroupById
      parameters:
        - name: id
          in: path
          description: Reference to the resouce which should be deleted
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: 'Success - Group deleted'
        '307':
          description: 'Temporary redirect - Use the provided URI for the next request, but not permanently'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '308':
          description: 'Permanent redirect - Use the provided URI for the next request permanently'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '400':
          description: 'Bad request - See scimType for further information'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: 'Unauthorized - Authentication failed try again with a valid authentication'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: 'Forbidden - Authentication was successful but the user is not authorized'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: 'Not found - No resource with provided Id'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: 'Conflict - Outdated version number or refusal of Service Provider to create a duplicate'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '412':
          description: 'Precondition failed - Failed to update. Resource has changed on the server.'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: 'Internal server error - Implementers provide a descriptive debugging advice'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '501':
          description: 'Not implemented - Service provider does not support the request'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'        
      security:
        - rbac_scim_auth:
          - delete:groups
  /Roles/.search:
    post:
      tags:
        - Role
      summary: Get filtered or all Roles
      description: This endpoint returns all or filtered Roles. Utilize the request body (SearchRequest) parameters to configure filtering, sorting, pagination and in-/excluded attribues. After receiving an HTTP POST request, a response is returned as specified in [Section 3.4.2 of RFC7644](https://datatracker.ietf.org/doc/html/rfc7644#section-3.4.2).
      operationId: searchRoles
      requestBody:
        description: 'SearchRequest with the required parameters'
        content:
          application/scim+json:
            schema: 
              $ref: '#/components/schemas/SearchRequest'
      responses:
        '200':
          description: 'Success - list of all Roles'
          content:
            application/scim+json:
              schema:
                  $ref: '#/components/schemas/RoleListResponse'
        '307':
          description: 'Temporary redirect - Use the provided URI for the next request, but not permanently'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '308':
          description: 'Permanent redirect - Use the provided URI for the next request permanently'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '400':
          description: 'Bad request - See scimType for further information'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: 'Unauthorized - Authentication failed try again with a valid authentication'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: 'Forbidden - Authentication was successful but the user is not authorized'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: 'Not found - No resource with provided Id'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: 'Internal server error - Implementers provide a descriptive debugging advice'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '501':
          description: 'Not implemented - Service provider does not support the request'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - rbac_scim_auth:
            - read:roles
  /Roles:
    post:
      tags:
        - Role
      summary: Create new role resource
      description: Creates a new Role. Some attributes might be immutable, thus make sure these are set correctly for creation. Unset required attributes might lead to assertions or insertion of default values. Readonly attributes are ignored. The query parameters attribues and excludedAttributes refer to the response upon success. The id attributes is set by the Service Provider to ensure uniqueness.
      operationId: createRole
      parameters:
        - in: query
          name: attributes
          schema:
            type: string
            example: id,users,entitlements
          description: A multi-valued list of strings indicating the names of resource attributes to return in the response, overriding the set of attributes that would be returned by default.  Attribute names MUST be in standard attribute notation (see [Section 3.10 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.10)) form. See [Section 3.9 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.9) for additional retrieval query parameters.
        - in: query
          name: excludedAttributes
          schema:
            type: string
            example: schema,meta
          description: A multi-valued list of strings indicating the names of resource attributes to be removed from the default set of attributes to return.  This parameter SHALL have no effect on attributes whose schema \"returned\" setting is \"always\" (see Sections [2.2](https://www.rfc-editor.org/rfc/rfc7644#section-2.2) and [7](https://www.rfc-editor.org/rfc/rfc7644#section-7) of RFC7644).  Attribute names MUST be in standard attribute notation ([Section 3.10 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.10)) form.  See [Section 3.9 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.9) for additional retrieval query parameters.
      requestBody:
        description: 'Content to create new role resource'
        content:
          application/scim+json:
            schema:
              $ref: '#/components/schemas/Role'
      responses:
        '201':
          description: 'Success - Role created'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Role'
        '307':
          description: 'Temporary redirect - Use the provided URI for the next request, but not permanently'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '308':
          description: 'Permanent redirect - Use the provided URI for the next request permanently'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '400':
          description: 'Bad request - See scimType for further information'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: 'Unauthorized - Authentication failed try again with a valid authentication'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: 'Forbidden - Authentication was successful but the user is not authorized'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: 'Not found - No resource with provided Id'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: 'Conflict - Outdated version number or refusal of Service Provider to create a duplicate'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: 'Internal server error - Implementers provide a descriptive debugging advice'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '501':
          description: 'Not implemented - Service provider does not support the request'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - rbac_scim_auth:
          - create:roles
    get:
      tags:
        - Role
      summary: Get filtered or all Roles
      description: This endpoint returns all or filtered Roles. Utilize the query parameters to configure filtering, sorting, pagination and in-/excluded attribues.
      operationId: getRoles
      parameters:
        - in: query
          name: filter
          schema:
            type: string
            example: filter=meta.lastModified gt "2011-05-13T04:42:34Z"
          description: Service providers may support filtering upon their resources. [Section 3.4.2.2 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.4.2.2) gives an overview on creating logical expressions for fitering. It includes attributes operators (eq, ne, co, sw, etc.), logical operators (and, or, not), grouping operators (for precedence or attribute filters), and expressing paths.
        - in: query
          name: sortBy
          schema:
            type: string
            example: id
          description: The \"sortBy\" parameter specifies the attribute whose value SHALL be used to order the returned responses.  If the \"sortBy\" attribute corresponds to a singular attribute, resources are sorted according to that attribute's value; if it's a multi-valued attribute, resources are sorted by the value of the primary attribute (see [Section 2.4 of RFC7643](https://www.rfc-editor.org/rfc/rfc7643#section-2.4)), if any, or else the first value in the list, if any.  If the attribute is complex, the attribute name must be a path to a sub-attribute in standard attribute notation (see [Section 3.10 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.10)), e.g., \"sortBy=name.givenName\". For all attribute types, if there is no data for the specified \"sortBy\" value, they are sorted via the \"sortOrder\" parameter, i.e., they are ordered last if ascending and first if descending.'
        - in: query
          name: sortOrder
          schema:
            type: string
            example: descending
            default: ascending
            enum:
              - ascending
              - descending
          description: The order in which the \"sortBy\" parameter is applied. Allowed values are \"ascending\" and \"descending\".  If a value for \"sortBy\" is provided and no \"sortOrder\" is specified, \"sortOrder\" SHALL default to ascending.  String type attributes are case insensitive by default, unless the attribute type is defined as a case-exact string.  \"sortOrder\" MUST sort according to the attribute type; i.e., for case-insensitive attributes, sort the result using case-insensitive Unicode alphabetic sort order with no specific locale implied, and for case-exact attribute types, sort the result using case-sensitive Unicode alphabetic sort order.
        - in: query
          name: startIndex
          schema:
            type: integer
            example: 2313
            default: 1
          description: The 1-based index of the first query result. A value less than 1 SHALL be interpreted as 1.
        - in: query
          name: count
          schema:
            type: integer
            example: 10
            default: 1000
          description: Non-negative integer. Specifies the desired maximum number of query results per page, e.g., 10. A negative value SHALL be interpreted as \"0\". A value of \"0\" indicates that no resource results are to be returned except for \"totalResults\". 
        - in: query
          name: attributes
          schema:
            type: string
            example: id,users,entitlements
          description: A multi-valued list of strings indicating the names of resource attributes to return in the response, overriding the set of attributes that would be returned by default.  Attribute names MUST be in standard attribute notation (see [Section 3.10 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.10)) form. See [Section 3.9 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.9) for additional retrieval query parameters.
        - in: query
          name: excludedAttributes
          schema:
            type: string
            example: schema,meta
          description: A multi-valued list of strings indicating the names of resource attributes to be removed from the default set of attributes to return.  This parameter SHALL have no effect on attributes whose schema \"returned\" setting is \"always\" (see Sections [2.2](https://www.rfc-editor.org/rfc/rfc7644#section-2.2) and [7](https://www.rfc-editor.org/rfc/rfc7644#section-7) of RFC7644).  Attribute names MUST be in standard attribute notation ([Section 3.10 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.10)) form.  See [Section 3.9 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.9) for additional retrieval query parameters.
      responses:
        '200':
          description: 'Success - list of all Roles'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/RoleListResponse'
        '307':
          description: 'Temporary redirect - Use the provided URI for the next request, but not permanently'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '308':
          description: 'Permanent redirect - Use the provided URI for the next request permanently'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '400':
          description: 'Bad request - See scimType for further information'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: 'Unauthorized - Authentication failed try again with a valid authentication'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: 'Forbidden - Authentication was successful but the user is not authorized'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: 'Not found - No resource with provided Id'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: 'Internal server error - Implementers provide a descriptive debugging advice'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '501':
          description: 'Not implemented - Service provider does not support the request'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - rbac_scim_auth:
          - read:roles
  /Roles/{id}:
    get:
      tags:
        - Role
      summary: Get role by Id
      description: Finds a single Role by its id attribute. Returned attributes might be specified or restricted with the query parameter attributes or excludedAttributes. Some attributes might not be readable according their schema definition.
      operationId: getRoleById
      parameters:
        - name: id
          in: path
          description: Reference to the resouce which should be queried
          required: true
          schema:
            type: string
            format: uuid
        - in: query
          name: attributes
          schema:
            type: string
            example: id,users,entitlements
          description: A multi-valued list of strings indicating the names of resource attributes to return in the response, overriding the set of attributes that would be returned by default.  Attribute names MUST be in standard attribute notation (see [Section 3.10 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.10)) form. See [Section 3.9 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.9) for additional retrieval query parameters.
        - in: query
          name: excludedAttributes
          schema:
            type: string
            example: schema,meta
          description: A multi-valued list of strings indicating the names of resource attributes to be removed from the default set of attributes to return.  This parameter SHALL have no effect on attributes whose schema \"returned\" setting is \"always\" (see Sections [2.2](https://www.rfc-editor.org/rfc/rfc7644#section-2.2) and [7](https://www.rfc-editor.org/rfc/rfc7644#section-7) of RFC7644).  Attribute names MUST be in standard attribute notation ([Section 3.10 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.10)) form.  See [Section 3.9 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.9) for additional retrieval query parameters.
      responses:
        '200':
          description: 'Success - Role found'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Role'
        '307':
          description: 'Temporary redirect - Use the provided URI for the next request, but not permanently'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '308':
          description: 'Permanent redirect - Use the provided URI for the next request permanently'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '400':
          description: 'Bad request - See scimType for further information'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: 'Unauthorized - Authentication failed try again with a valid authentication'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: 'Forbidden - Authentication was successful but the user is not authorized'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: 'Not found - No resource with provided Id'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: 'Internal server error - Implementers provide a descriptive debugging advice'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '501':
          description: 'Not implemented - Service provider does not support the request'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - rbac_scim_auth:
          - read:roles
    put:
      tags:
        - Role
      summary: Update role by Id
      description: Updates a present Role. Unset required attributes might lead to assertions or insertion of default values. Readonly attributes are ignored. The query parameters attribues and excludedAttributes refer to the response upon success.
      operationId: updateRoleById
      parameters:
        - name: id
          in: path
          description: Reference to the resouce which requires an update
          required: true
          schema:
            type: string
            format: uuid
        - in: query
          name: attributes
          schema:
            type: string
            example: id,users,entitlements
          description: A multi-valued list of strings indicating the names of resource attributes to return in the response, overriding the set of attributes that would be returned by default.  Attribute names MUST be in standard attribute notation (see [Section 3.10 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.10)) form. See [Section 3.9 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.9) for additional retrieval query parameters.
        - in: query
          name: excludedAttributes
          schema:
            type: string
            example: schema,meta
          description: A multi-valued list of strings indicating the names of resource attributes to be removed from the default set of attributes to return.  This parameter SHALL have no effect on attributes whose schema \"returned\" setting is \"always\" (see Sections [2.2](https://www.rfc-editor.org/rfc/rfc7644#section-2.2) and [7](https://www.rfc-editor.org/rfc/rfc7644#section-7) of RFC7644).  Attribute names MUST be in standard attribute notation ([Section 3.10 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.10)) form.  See [Section 3.9 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.9) for additional retrieval query parameters.
      requestBody:
        description: 'Content for updating an existing role by Id'
        content:
          application/scim+json:
            schema:
              $ref: '#/components/schemas/Role'
      responses:
        '200':
          description: 'Success - Role updated'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Role'
        '307':
          description: 'Temporary redirect - Use the provided URI for the next request, but not permanently'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '308':
          description: 'Permanent redirect - Use the provided URI for the next request permanently'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '400':
          description: 'Bad request - See scimType for further information'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: 'Unauthorized - Authentication failed try again with a valid authentication'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: 'Forbidden - Authentication was successful but the user is not authorized'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: 'Not found - No resource with provided Id'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: 'Conflict - Outdated version number or refusal of Service Provider to create a duplicate'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '412':
          description: 'Precondition failed - Failed to update. Resource has changed on the server.'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: 'Internal server error - Implementers provide a descriptive debugging advice'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '501':
          description: 'Not implemented - Service provider does not support the request'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - rbac_scim_auth:
          - update:roles
    patch:
      tags:
        - Role
      summary: Update role value(s) by Role Id
      description: Updates selected attributes of a present Role. Readonly attributes are ignored. The query parameters attribues and excludedAttributes refer to the response upon success. Invalid or non-existent attribute paths and invalid values lead to a HTTP status code 400 with a scimType containing the error type.  
      parameters:
        - name: id
          in: path
          description: Reference to the resouce which requires an update
          required: true
          schema:
            type: string
            format: uuid
        - in: query
          name: attributes
          schema:
            type: string
            example: id,users,entitlements
          description: A multi-valued list of strings indicating the names of resource attributes to return in the response, overriding the set of attributes that would be returned by default.  Attribute names MUST be in standard attribute notation (see [Section 3.10 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.10)) form. See [Section 3.9 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.9) for additional retrieval query parameters.
        - in: query
          name: excludedAttributes
          schema:
            type: string
            example: schema,meta
          description: A multi-valued list of strings indicating the names of resource attributes to be removed from the default set of attributes to return.  This parameter SHALL have no effect on attributes whose schema \"returned\" setting is \"always\" (see Sections [2.2](https://www.rfc-editor.org/rfc/rfc7644#section-2.2) and [7](https://www.rfc-editor.org/rfc/rfc7644#section-7) of RFC7644).  Attribute names MUST be in standard attribute notation ([Section 3.10 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.10)) form.  See [Section 3.9 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.9) for additional retrieval query parameters.
      requestBody:
        description: 'Content for updating an existent role by Id'
        content:
          application/scim+json:
            schema:
              $ref: '#/components/schemas/PatchOp'
      responses:
        '200':
          description: 'Success - Role value(s) updated'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Role'
        '307':
          description: 'Temporary redirect - Use the provided URI for the next request, but not permanently'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '308':
          description: 'Permanent redirect - Use the provided URI for the next request permanently'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '400':
          description: 'Bad request - See scimType for further information'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: 'Unauthorized - Authentication failed try again with a valid authentication'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: 'Forbidden - Authentication was successful but the user is not authorized'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: 'Not found - No resource with provided Id'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: 'Conflict - Outdated version number or refusal of Service Provider to create a duplicate'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '412':
          description: 'Precondition failed - Failed to update. Resource has changed on the server.'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: 'Internal server error - Implementers provide a descriptive debugging advice'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '501':
          description: 'Not implemented - Service provider does not support the request'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - rbac_scim_auth:
          - update:roles
    delete:
      tags:
        - Role
      summary: Delete role by Id
      description: Deletes a present Role. For subsequent requests on that resource and after successful deletion, a HTTP status code 404 is returned. 
      operationId: deleteRoleById
      parameters:
        - name: id
          in: path
          description: Reference to the resouce which should be deleted
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: 'Success - Role deleted'
        '307':
          description: 'Temporary redirect - Use the provided URI for the next request, but not permanently'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '308':
          description: 'Permanent redirect - Use the provided URI for the next request permanently'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '400':
          description: 'Bad request - See scimType for further information'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: 'Unauthorized - Authentication failed try again with a valid authentication'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: 'Forbidden - Authentication was successful but the user is not authorized'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: 'Not found - No resource with provided Id'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: 'Conflict - Outdated version number or refusal of Service Provider to create a duplicate'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '412':
          description: 'Precondition failed - Failed to update. Resource has changed on the server.'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: 'Internal server error - Implementers provide a descriptive debugging advice'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '501':
          description: 'Not implemented - Service provider does not support the request'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - rbac_scim_auth:
          - delete:roles
  /Entitlements/.search:
    post:
      tags:
        - Entitlement
      summary: Get filtered or all Entitlements
      description: This endpoint returns all or filtered Entitlements. Utilize the request body (SearchRequest) parameters to configure filtering, sorting, pagination and in-/excluded attribues. After receiving an HTTP POST request, a response is returned as specified in [Section 3.4.2 of RFC7644](https://datatracker.ietf.org/doc/html/rfc7644#section-3.4.2).
      operationId: searchEntitlements
      requestBody:
        description: 'SearchRequest with the required parameters'
        content:
          application/scim+json:
            schema: 
              $ref: '#/components/schemas/SearchRequest'
      responses:
        '200':
          description: 'Success - list of all Roles'
          content:
            application/scim+json:
              schema:
                  $ref: '#/components/schemas/EntitlementListResponse'
        '307':
          description: 'Temporary redirect - Use the provided URI for the next request, but not permanently'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '308':
          description: 'Permanent redirect - Use the provided URI for the next request permanently'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '400':
          description: 'Bad request - See scimType for further information'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: 'Unauthorized - Authentication failed try again with a valid authentication'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: 'Forbidden - Authentication was successful but the user is not authorized'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: 'Not found - No resource with provided Id'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: 'Internal server error - Implementers provide a descriptive debugging advice'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '501':
          description: 'Not implemented - Service provider does not support the request'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - rbac_scim_auth:
            - read:entitlements
  /Entitlements:
    post:
      tags:
        - Entitlement
      summary: Create new entitlement resource
      description: Creates a new Entitlement. Some attributes might be immutable, thus make sure these are set correctly for creation. Unset required attributes might lead to assertions or insertion of default values. Readonly attributes are ignored. The query parameters attribues and excludedAttributes refer to the response upon success. The id attributes is set by the Service Provider to ensure uniqueness.
      operationId: createEntitlement
      parameters:
        - in: query
          name: attributes
          schema:
            type: string
            example: id,roles,accounts,application
          description: A multi-valued list of strings indicating the names of resource attributes to return in the response, overriding the set of attributes that would be returned by default.  Attribute names MUST be in standard attribute notation (see [Section 3.10 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.10)) form. See [Section 3.9 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.9) for additional retrieval query parameters.
        - in: query
          name: excludedAttributes
          schema:
            type: string
            example: schema,meta
          description: A multi-valued list of strings indicating the names of resource attributes to be removed from the default set of attributes to return.  This parameter SHALL have no effect on attributes whose schema \"returned\" setting is \"always\" (see Sections [2.2](https://www.rfc-editor.org/rfc/rfc7644#section-2.2) and [7](https://www.rfc-editor.org/rfc/rfc7644#section-7) of RFC7644).  Attribute names MUST be in standard attribute notation ([Section 3.10 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.10)) form.  See [Section 3.9 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.9) for additional retrieval query parameters.
      requestBody:
        description: 'Content to create new entitlement resource'
        content:
          application/scim+json:
            schema:
              $ref: '#/components/schemas/Entitlement'
      responses:
        '201':
          description: 'Success - Entitlement created'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Entitlement'
        '307':
          description: 'Temporary redirect - Use the provided URI for the next request, but not permanently'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '308':
          description: 'Permanent redirect - Use the provided URI for the next request permanently'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '400':
          description: 'Bad request - See scimType for further information'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: 'Unauthorized - Authentication failed try again with a valid authentication'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: 'Forbidden - Authentication was successful but the user is not authorized'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: 'Not found - No resource with provided Id'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: 'Conflict - Outdated version number or refusal of Service Provider to create a duplicate'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: 'Internal server error - Implementers provide a descriptive debugging advice'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '501':
          description: 'Not implemented - Service provider does not support the request'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - rbac_scim_auth:
          - create:entitlements
    get:
      tags:
        - Entitlement
      summary: Get filtered or all Entitlements
      description: This endpoint returns all or filtered Entitlements. Utilize the query parameters to configure filtering, sorting, pagination and in-/excluded attribues.
      operationId: getEntitlements
      parameters:
        - in: query
          name: filter
          schema:
            type: string
            example: filter=meta.lastModified gt "2011-05-13T04:42:34Z"
          description: Service providers may support filtering upon their resources. [Section 3.4.2.2 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.4.2.2) gives an overview on creating logical expressions for fitering. It includes attributes operators (eq, ne, co, sw, etc.), logical operators (and, or, not), grouping operators (for precedence or attribute filters), and expressing paths.
        - in: query
          name: sortBy
          schema:
            type: string
            example: id
          description: The \"sortBy\" parameter specifies the attribute whose value SHALL be used to order the returned responses.  If the \"sortBy\" attribute corresponds to a singular attribute, resources are sorted according to that attribute's value; if it's a multi-valued attribute, resources are sorted by the value of the primary attribute (see [Section 2.4 of RFC7643](https://www.rfc-editor.org/rfc/rfc7643#section-2.4)), if any, or else the first value in the list, if any.  If the attribute is complex, the attribute name must be a path to a sub-attribute in standard attribute notation (see [Section 3.10 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.10)), e.g., \"sortBy=name.givenName\". For all attribute types, if there is no data for the specified \"sortBy\" value, they are sorted via the \"sortOrder\" parameter, i.e., they are ordered last if ascending and first if descending.'
        - in: query
          name: sortOrder
          schema:
            type: string
            example: descending
            default: ascending
            enum:
              - ascending
              - descending
          description: The order in which the \"sortBy\" parameter is applied. Allowed values are \"ascending\" and \"descending\".  If a value for \"sortBy\" is provided and no \"sortOrder\" is specified, \"sortOrder\" SHALL default to ascending.  String type attributes are case insensitive by default, unless the attribute type is defined as a case-exact string.  \"sortOrder\" MUST sort according to the attribute type; i.e., for case-insensitive attributes, sort the result using case-insensitive Unicode alphabetic sort order with no specific locale implied, and for case-exact attribute types, sort the result using case-sensitive Unicode alphabetic sort order.
        - in: query
          name: startIndex
          schema:
            type: integer
            example: 2313
            default: 1
          description: The 1-based index of the first query result. A value less than 1 SHALL be interpreted as 1.
        - in: query
          name: count
          schema:
            type: integer
            example: 10
            default: 1000
          description: Non-negative integer. Specifies the desired maximum number of query results per page, e.g., 10. A negative value SHALL be interpreted as \"0\". A value of \"0\" indicates that no resource results are to be returned except for \"totalResults\". 
        - in: query
          name: attributes
          schema:
            type: string
            example: id,roles,accounts,application
          description: A multi-valued list of strings indicating the names of resource attributes to return in the response, overriding the set of attributes that would be returned by default.  Attribute names MUST be in standard attribute notation (see [Section 3.10 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.10)) form. See [Section 3.9 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.9) for additional retrieval query parameters.
        - in: query
          name: excludedAttributes
          schema:
            type: string
            example: schema,meta
          description: A multi-valued list of strings indicating the names of resource attributes to be removed from the default set of attributes to return.  This parameter SHALL have no effect on attributes whose schema \"returned\" setting is \"always\" (see Sections [2.2](https://www.rfc-editor.org/rfc/rfc7644#section-2.2) and [7](https://www.rfc-editor.org/rfc/rfc7644#section-7) of RFC7644).  Attribute names MUST be in standard attribute notation ([Section 3.10 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.10)) form.  See [Section 3.9 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.9) for additional retrieval query parameters.
      responses:
        '200':
          description: 'Success - list of all Entitlements'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/EntitlementListResponse'
        '307':
          description: 'Temporary redirect - Use the provided URI for the next request, but not permanently'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '308':
          description: 'Permanent redirect - Use the provided URI for the next request permanently'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '400':
          description: 'Bad request - See scimType for further information'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: 'Unauthorized - Authentication failed try again with a valid authentication'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: 'Forbidden - Authentication was successful but the user is not authorized'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: 'Not found - No resource with provided Id'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: 'Internal server error - Implementers provide a descriptive debugging advice'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '501':
          description: 'Not implemented - Service provider does not support the request'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - rbac_scim_auth:
          - read:entitlements
  /Entitlements/{id}:
    get:
      tags:
        - Entitlement
      summary: Get entitlement by Id
      description: Finds a single Entitlement by its id attribute. Returned attributes might be specified or restricted with the query parameter attributes or excludedAttributes. Some attributes might not be readable according their schema definition.
      operationId: getEntitlementById
      parameters:
        - name: id
          in: path
          description: Reference to the resouce which should be queried
          required: true
          schema:
            type: string
            format: uuid
        - in: query
          name: attributes
          schema:
            type: string
            example: id,roles,accounts,application
          description: A multi-valued list of strings indicating the names of resource attributes to return in the response, overriding the set of attributes that would be returned by default.  Attribute names MUST be in standard attribute notation (see [Section 3.10 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.10)) form. See [Section 3.9 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.9) for additional retrieval query parameters.
        - in: query
          name: excludedAttributes
          schema:
            type: string
            example: schema,meta
          description: A multi-valued list of strings indicating the names of resource attributes to be removed from the default set of attributes to return.  This parameter SHALL have no effect on attributes whose schema \"returned\" setting is \"always\" (see Sections [2.2](https://www.rfc-editor.org/rfc/rfc7644#section-2.2) and [7](https://www.rfc-editor.org/rfc/rfc7644#section-7) of RFC7644).  Attribute names MUST be in standard attribute notation ([Section 3.10 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.10)) form.  See [Section 3.9 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.9) for additional retrieval query parameters.
      responses:
        '200':
          description: 'Success - Entitlement found'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Entitlement'
        '307':
          description: 'Temporary redirect - Use the provided URI for the next request, but not permanently'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '308':
          description: 'Permanent redirect - Use the provided URI for the next request permanently'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '400':
          description: 'Bad request - See scimType for further information'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: 'Unauthorized - Authentication failed try again with a valid authentication'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: 'Forbidden - Authentication was successful but the user is not authorized'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: 'Not found - No resource with provided Id'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: 'Internal server error - Implementers provide a descriptive debugging advice'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '501':
          description: 'Not implemented - Service provider does not support the request'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - rbac_scim_auth:
          - read:entitlements
    put:
      tags:
        - Entitlement
      summary: Update entitlement by Id
      description: Updates a present Entitlement. Unset required attributes might lead to assertions or insertion of default values. Readonly attributes are ignored. The query parameters attribues and excludedAttributes refer to the response upon success.
      operationId: updateEntitlementById
      parameters:
        - name: id
          in: path
          description: Reference to the resouce which requires an update
          required: true
          schema:
            type: string
            format: uuid
        - in: query
          name: attributes
          schema:
            type: string
            example: id,roles,accounts,application
          description: A multi-valued list of strings indicating the names of resource attributes to return in the response, overriding the set of attributes that would be returned by default.  Attribute names MUST be in standard attribute notation (see [Section 3.10 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.10)) form. See [Section 3.9 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.9) for additional retrieval query parameters.
        - in: query
          name: excludedAttributes
          schema:
            type: string
            example: schema,meta
          description: A multi-valued list of strings indicating the names of resource attributes to be removed from the default set of attributes to return.  This parameter SHALL have no effect on attributes whose schema \"returned\" setting is \"always\" (see Sections [2.2](https://www.rfc-editor.org/rfc/rfc7644#section-2.2) and [7](https://www.rfc-editor.org/rfc/rfc7644#section-7) of RFC7644).  Attribute names MUST be in standard attribute notation ([Section 3.10 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.10)) form.  See [Section 3.9 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.9) for additional retrieval query parameters.
      requestBody:
        description: 'Content for updating an existent entitlement by Id'
        content:
          application/scim+json:
            schema:
              $ref: '#/components/schemas/Entitlement'
      responses:
        '200':
          description: 'Success - Entitlement updated'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Entitlement'
        '307':
          description: 'Temporary redirect - Use the provided URI for the next request, but not permanently'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '308':
          description: 'Permanent redirect - Use the provided URI for the next request permanently'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '400':
          description: 'Bad request - See scimType for further information'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: 'Unauthorized - Authentication failed try again with a valid authentication'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: 'Forbidden - Authentication was successful but the user is not authorized'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: 'Not found - No resource with provided Id'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: 'Conflict - Outdated version number or refusal of Service Provider to create a duplicate'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '412':
          description: 'Precondition failed - Failed to update. Resource has changed on the server.'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: 'Internal server error - Implementers provide a descriptive debugging advice'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '501':
          description: 'Not implemented - Service provider does not support the request'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - rbac_scim_auth:
          - update:entitlements
    patch:
      tags:
        - Entitlement
      summary: Update entitlement value(s) by Entitlement Id
      description: Updates selected attributes of a present Entitlement. Readonly attributes are ignored. The query parameters attribues and excludedAttributes refer to the response upon success. Invalid or non-existent attribute paths and invalid values lead to a HTTP status code 400 with a scimType containing the error type.  
      parameters:
        - name: id
          in: path
          description: Reference to the resouce which requires an update
          required: true
          schema:
            type: string
            format: uuid
        - in: query
          name: attributes
          schema:
            type: string
            example: id,roles,accounts,application
          description: A multi-valued list of strings indicating the names of resource attributes to return in the response, overriding the set of attributes that would be returned by default.  Attribute names MUST be in standard attribute notation (see [Section 3.10 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.10)) form. See [Section 3.9 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.9) for additional retrieval query parameters.
        - in: query
          name: excludedAttributes
          schema:
            type: string
            example: schema,meta
          description: A multi-valued list of strings indicating the names of resource attributes to be removed from the default set of attributes to return.  This parameter SHALL have no effect on attributes whose schema \"returned\" setting is \"always\" (see Sections [2.2](https://www.rfc-editor.org/rfc/rfc7644#section-2.2) and [7](https://www.rfc-editor.org/rfc/rfc7644#section-7) of RFC7644).  Attribute names MUST be in standard attribute notation ([Section 3.10 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.10)) form.  See [Section 3.9 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.9) for additional retrieval query parameters.
      requestBody:
        description: 'Content for updating an existing entitlement by Id'
        content:
          application/scim+json:
            schema:
              $ref: '#/components/schemas/PatchOp'
      responses:
        '200':
          description: 'Success - Entitlement value(s) updated'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Entitlement'
        '307':
          description: 'Temporary redirect - Use the provided URI for the next request, but not permanently'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '308':
          description: 'Permanent redirect - Use the provided URI for the next request permanently'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '400':
          description: 'Bad request - See scimType for further information'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: 'Unauthorized - Authentication failed try again with a valid authentication'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: 'Forbidden - Authentication was successful but the user is not authorized'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: 'Not found - No resource with provided Id'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: 'Conflict - Outdated version number or refusal of Service Provider to create a duplicate'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '412':
          description: 'Precondition failed - Failed to update. Resource has changed on the server.'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: 'Internal server error - Implementers provide a descriptive debugging advice'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '501':
          description: 'Not implemented - Service provider does not support the request'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - rbac_scim_auth:
          - update:entitlements
    delete:
      tags:
        - Entitlement
      summary: Delete entitlement by Id
      description: Deletes a present Entitlement. For subsequent requests on that resource and after successful deletion, a HTTP status code 404 is returned. 
      operationId: deleteEntitlementById
      parameters:
        - name: id
          in: path
          description: Reference to the resouce which should be deleted
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: 'Success - Entitlement deleted'
        '307':
          description: 'Temporary redirect - Use the provided URI for the next request, but not permanently'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '308':
          description: 'Permanent redirect - Use the provided URI for the next request permanently'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '400':
          description: 'Bad request - See scimType for further information'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: 'Unauthorized - Authentication failed try again with a valid authentication'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: 'Forbidden - Authentication was successful but the user is not authorized'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: 'Not found - No resource with provided Id'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: 'Conflict - Outdated version number or refusal of Service Provider to create a duplicate'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '412':
          description: 'Precondition failed - Failed to update. Resource has changed on the server.'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: 'Internal server error - Implementers provide a descriptive debugging advice'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '501':
          description: 'Not implemented - Service provider does not support the request'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'      
      security:
        - rbac_scim_auth:
          - delete:entitlements
  /Accounts/.search:
    post:
      tags:
        - Account
      summary: Get filtered or all Accounts
      description: This endpoint returns all or filtered Accounts. Utilize the request body (SearchRequest) parameters to configure filtering, sorting, pagination and in-/excluded attribues. After receiving an HTTP POST request, a response is returned as specified in [Section 3.4.2 of RFC7644](https://datatracker.ietf.org/doc/html/rfc7644#section-3.4.2).
      operationId: searchAccounts
      requestBody:
        description: 'SearchRequest with the required parameters'
        content:
          application/scim+json:
            schema: 
              $ref: '#/components/schemas/SearchRequest'
      responses:
        '200':
          description: 'Success - list of all Accounts'
          content:
            application/scim+json:
              schema:
                  $ref: '#/components/schemas/AccountListResponse'
        '307':
          description: 'Temporary redirect - Use the provided URI for the next request, but not permanently'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '308':
          description: 'Permanent redirect - Use the provided URI for the next request permanently'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '400':
          description: 'Bad request - See scimType for further information'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: 'Unauthorized - Authentication failed try again with a valid authentication'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: 'Forbidden - Authentication was successful but the user is not authorized'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: 'Not found - No resource with provided Id'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: 'Internal server error - Implementers provide a descriptive debugging advice'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '501':
          description: 'Not implemented - Service provider does not support the request'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - rbac_scim_auth:
            - read:accounts
  /Accounts:
    post:
      tags:
        - Account
      summary: Create new account resource
      description: Creates a new Account. Some attributes might be immutable, thus make sure these are set correctly for creation. Unset required attributes might lead to assertions or insertion of default values. Readonly attributes are ignored. The query parameters attribues and excludedAttributes refer to the response upon success. The id attributes is set by the Service Provider to ensure uniqueness.
      operationId: createAccount
      parameters:
        - in: query
          name: attributes
          schema:
            type: string
            example: id,user,application,entitlements
          description: A multi-valued list of strings indicating the names of resource attributes to return in the response, overriding the set of attributes that would be returned by default.  Attribute names MUST be in standard attribute notation (see [Section 3.10 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.10)) form. See [Section 3.9 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.9) for additional retrieval query parameters.
        - in: query
          name: excludedAttributes
          schema:
            type: string
            example: schema,meta
          description: A multi-valued list of strings indicating the names of resource attributes to be removed from the default set of attributes to return.  This parameter SHALL have no effect on attributes whose schema \"returned\" setting is \"always\" (see Sections [2.2](https://www.rfc-editor.org/rfc/rfc7644#section-2.2) and [7](https://www.rfc-editor.org/rfc/rfc7644#section-7) of RFC7644).  Attribute names MUST be in standard attribute notation ([Section 3.10 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.10)) form.  See [Section 3.9 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.9) for additional retrieval query parameters.
      requestBody:
        description: 'Content to create new account resource'
        content:
          application/scim+json:
            schema:
              $ref: '#/components/schemas/Account'
      responses:
        '201':
          description: 'Success - Account created'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Account'
        '307':
          description: 'Temporary redirect - Use the provided URI for the next request, but not permanently'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '308':
          description: 'Permanent redirect - Use the provided URI for the next request permanently'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '400':
          description: 'Bad request - See scimType for further information'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: 'Unauthorized - Authentication failed try again with a valid authentication'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: 'Forbidden - Authentication was successful but the user is not authorized'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: 'Not found - No resource with provided Id'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: 'Conflict - Outdated version number or refusal of Service Provider to create a duplicate'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: 'Internal server error - Implementers provide a descriptive debugging advice'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '501':
          description: 'Not implemented - Service provider does not support the request'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - rbac_scim_auth:
          - create:accounts
    get:
      tags:
        - Account
      summary: Get filtered or all Accounts
      description: This endpoint returns all or filtered Accounts. Utilize the query parameters to configure filtering, sorting, pagination and in-/excluded attribues.
      operationId: getAccounts
      parameters:
        - in: query
          name: filter
          schema:
            type: string
            example: filter=meta.lastModified gt "2011-05-13T04:42:34Z"
          description: Service providers may support filtering upon their resources. [Section 3.4.2.2 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.4.2.2) gives an overview on creating logical expressions for fitering. It includes attributes operators (eq, ne, co, sw, etc.), logical operators (and, or, not), grouping operators (for precedence or attribute filters), and expressing paths.
        - in: query
          name: sortBy
          schema:
            type: string
            example: id
          description: The \"sortBy\" parameter specifies the attribute whose value SHALL be used to order the returned responses.  If the \"sortBy\" attribute corresponds to a singular attribute, resources are sorted according to that attribute's value; if it's a multi-valued attribute, resources are sorted by the value of the primary attribute (see [Section 2.4 of RFC7643](https://www.rfc-editor.org/rfc/rfc7643#section-2.4)), if any, or else the first value in the list, if any.  If the attribute is complex, the attribute name must be a path to a sub-attribute in standard attribute notation (see [Section 3.10 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.10)), e.g., \"sortBy=name.givenName\". For all attribute types, if there is no data for the specified \"sortBy\" value, they are sorted via the \"sortOrder\" parameter, i.e., they are ordered last if ascending and first if descending.'
        - in: query
          name: sortOrder
          schema:
            type: string
            example: descending
            default: ascending
            enum:
              - ascending
              - descending
          description: The order in which the \"sortBy\" parameter is applied. Allowed values are \"ascending\" and \"descending\".  If a value for \"sortBy\" is provided and no \"sortOrder\" is specified, \"sortOrder\" SHALL default to ascending.  String type attributes are case insensitive by default, unless the attribute type is defined as a case-exact string.  \"sortOrder\" MUST sort according to the attribute type; i.e., for case-insensitive attributes, sort the result using case-insensitive Unicode alphabetic sort order with no specific locale implied, and for case-exact attribute types, sort the result using case-sensitive Unicode alphabetic sort order.
        - in: query
          name: startIndex
          schema:
            type: integer
            example: 2313
            default: 1
          description: The 1-based index of the first query result. A value less than 1 SHALL be interpreted as 1.
        - in: query
          name: count
          schema:
            type: integer
            example: 10
            default: 1000
          description: Non-negative integer. Specifies the desired maximum number of query results per page, e.g., 10. A negative value SHALL be interpreted as \"0\". A value of \"0\" indicates that no resource results are to be returned except for \"totalResults\". 
        - in: query
          name: attributes
          schema:
            type: string
            example: id,user,application,entitlements
          description: A multi-valued list of strings indicating the names of resource attributes to return in the response, overriding the set of attributes that would be returned by default.  Attribute names MUST be in standard attribute notation (see [Section 3.10 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.10)) form. See [Section 3.9 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.9) for additional retrieval query parameters.
        - in: query
          name: excludedAttributes
          schema:
            type: string
            example: schema,meta
          description: A multi-valued list of strings indicating the names of resource attributes to be removed from the default set of attributes to return.  This parameter SHALL have no effect on attributes whose schema \"returned\" setting is \"always\" (see Sections [2.2](https://www.rfc-editor.org/rfc/rfc7644#section-2.2) and [7](https://www.rfc-editor.org/rfc/rfc7644#section-7) of RFC7644).  Attribute names MUST be in standard attribute notation ([Section 3.10 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.10)) form.  See [Section 3.9 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.9) for additional retrieval query parameters.
      responses:
        '200':
          description: 'Success - list of all Accounts'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/AccountListResponse'
        '307':
          description: 'Temporary redirect - Use the provided URI for the next request, but not permanently'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '308':
          description: 'Permanent redirect - Use the provided URI for the next request permanently'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '400':
          description: 'Bad request - See scimType for further information'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: 'Unauthorized - Authentication failed try again with a valid authentication'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: 'Forbidden - Authentication was successful but the user is not authorized'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: 'Not found - No resource with provided Id'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: 'Internal server error - Implementers provide a descriptive debugging advice'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '501':
          description: 'Not implemented - Service provider does not support the request'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - rbac_scim_auth:
          - read:accounts
  /Accounts/{id}:
    get:
      tags:
        - Account
      summary: Get account by Id
      description: Finds a single Account by its id attribute. Returned attributes might be specified or restricted with the query parameter attributes or excludedAttributes. Some attributes might not be readable according their schema definition.
      operationId: getAccountById
      parameters:
        - name: id
          in: path
          description: Reference to the resouce which should be queried
          required: true
          schema:
            type: string
            format: uuid
        - in: query
          name: attributes
          schema:
            type: string
            example: id,user,application,entitlements
          description: A multi-valued list of strings indicating the names of resource attributes to return in the response, overriding the set of attributes that would be returned by default.  Attribute names MUST be in standard attribute notation (see [Section 3.10 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.10)) form. See [Section 3.9 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.9) for additional retrieval query parameters.
        - in: query
          name: excludedAttributes
          schema:
            type: string
            example: schema,meta
          description: A multi-valued list of strings indicating the names of resource attributes to be removed from the default set of attributes to return.  This parameter SHALL have no effect on attributes whose schema \"returned\" setting is \"always\" (see Sections [2.2](https://www.rfc-editor.org/rfc/rfc7644#section-2.2) and [7](https://www.rfc-editor.org/rfc/rfc7644#section-7) of RFC7644).  Attribute names MUST be in standard attribute notation ([Section 3.10 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.10)) form.  See [Section 3.9 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.9) for additional retrieval query parameters.
      responses:
        '200':
          description: 'Success - Account found'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Account'
        '307':
          description: 'Temporary redirect - Use the provided URI for the next request, but not permanently'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '308':
          description: 'Permanent redirect - Use the provided URI for the next request permanently'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '400':
          description: 'Bad request - See scimType for further information'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: 'Unauthorized - Authentication failed try again with a valid authentication'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: 'Forbidden - Authentication was successful but the user is not authorized'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: 'Not found - No resource with provided Id'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: 'Internal server error - Implementers provide a descriptive debugging advice'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '501':
          description: 'Not implemented - Service provider does not support the request'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - rbac_scim_auth:
          - read:accounts
    put:
      tags:
        - Account
      summary: Update account by Id
      description: Updates a present Account. Unset required attributes might lead to assertions or insertion of default values. Readonly attributes are ignored. The query parameters attribues and excludedAttributes refer to the response upon success.
      operationId: updateAccountById
      parameters:
        - name: id
          in: path
          description: Reference to the resouce which requires an update
          required: true
          schema:
            type: string
            format: uuid
        - in: query
          name: attributes
          schema:
            type: string
            example: id,user,application,entitlements
          description: A multi-valued list of strings indicating the names of resource attributes to return in the response, overriding the set of attributes that would be returned by default.  Attribute names MUST be in standard attribute notation (see [Section 3.10 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.10)) form. See [Section 3.9 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.9) for additional retrieval query parameters.
        - in: query
          name: excludedAttributes
          schema:
            type: string
            example: schema,meta
          description: A multi-valued list of strings indicating the names of resource attributes to be removed from the default set of attributes to return.  This parameter SHALL have no effect on attributes whose schema \"returned\" setting is \"always\" (see Sections [2.2](https://www.rfc-editor.org/rfc/rfc7644#section-2.2) and [7](https://www.rfc-editor.org/rfc/rfc7644#section-7) of RFC7644).  Attribute names MUST be in standard attribute notation ([Section 3.10 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.10)) form.  See [Section 3.9 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.9) for additional retrieval query parameters.
      requestBody:
        description: 'Content for updating an existent user by Id'
        content:
          application/scim+json:
            schema:
              $ref: '#/components/schemas/Account'
      responses:
        '200':
          description: 'Success - Account updated'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Account'
        '307':
          description: 'Temporary redirect - Use the provided URI for the next request, but not permanently'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '308':
          description: 'Permanent redirect - Use the provided URI for the next request permanently'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '400':
          description: 'Bad request - See scimType for further information'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: 'Unauthorized - Authentication failed try again with a valid authentication'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: 'Forbidden - Authentication was successful but the user is not authorized'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: 'Not found - No resource with provided Id'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: 'Conflict - Outdated version number or refusal of Service Provider to create a duplicate'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '412':
          description: 'Precondition failed - Failed to update. Resource has changed on the server.'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: 'Internal server error - Implementers provide a descriptive debugging advice'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '501':
          description: 'Not implemented - Service provider does not support the request'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - rbac_scim_auth:
          - update:accounts
    patch:
      tags:
        - Account
      summary: Update account value(s) by Account Id
      description: Updates selected attributes of a present Account. Readonly attributes are ignored. The query parameters attribues and excludedAttributes refer to the response upon success. Invalid or non-existent attribute paths and invalid values lead to a HTTP status code 400 with a scimType containing the error type.  
      parameters:
        - name: id
          in: path
          description: Reference to the resouce which requires an update
          required: true
          schema:
            type: string
            format: uuid
        - in: query
          name: attributes
          schema:
            type: string
            example: id,user,application,entitlements
          description: A multi-valued list of strings indicating the names of resource attributes to return in the response, overriding the set of attributes that would be returned by default.  Attribute names MUST be in standard attribute notation (see [Section 3.10 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.10)) form. See [Section 3.9 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.9) for additional retrieval query parameters.
        - in: query
          name: excludedAttributes
          schema:
            type: string
            example: schema,meta
          description: A multi-valued list of strings indicating the names of resource attributes to be removed from the default set of attributes to return.  This parameter SHALL have no effect on attributes whose schema \"returned\" setting is \"always\" (see Sections [2.2](https://www.rfc-editor.org/rfc/rfc7644#section-2.2) and [7](https://www.rfc-editor.org/rfc/rfc7644#section-7) of RFC7644).  Attribute names MUST be in standard attribute notation ([Section 3.10 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.10)) form.  See [Section 3.9 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.9) for additional retrieval query parameters.
      requestBody:
        description: 'Content for updating an existent account by Id'
        content:
          application/scim+json:
            schema:
              $ref: '#/components/schemas/PatchOp'
      responses:
        '200':
          description: 'Success - Account value(s) updated'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Account'
        '307':
          description: 'Temporary redirect - Use the provided URI for the next request, but not permanently'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '308':
          description: 'Permanent redirect - Use the provided URI for the next request permanently'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '400':
          description: 'Bad request - See scimType for further information'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: 'Unauthorized - Authentication failed try again with a valid authentication'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: 'Forbidden - Authentication was successful but the user is not authorized'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: 'Not found - No resource with provided Id'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: 'Conflict - Outdated version number or refusal of Service Provider to create a duplicate'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '412':
          description: 'Precondition failed - Failed to update. Resource has changed on the server.'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: 'Internal server error - Implementers provide a descriptive debugging advice'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '501':
          description: 'Not implemented - Service provider does not support the request'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - rbac_scim_auth:
          - update:accounts
    delete:
      tags:
        - Account
      summary: Delete account by Id
      description: Deletes a present Account. For subsequent requests on that resource and after successful deletion, a HTTP status code 404 is returned. 
      operationId: deleteAccountById
      parameters:
        - name: id
          in: path
          description: Reference to the resouce which should be deleted
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: 'Success - Account deleted'
        '307':
          description: 'Temporary redirect - Use the provided URI for the next request, but not permanently'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '308':
          description: 'Permanent redirect - Use the provided URI for the next request permanently'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '400':
          description: 'Bad request - See scimType for further information'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: 'Unauthorized - Authentication failed try again with a valid authentication'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: 'Forbidden - Authentication was successful but the user is not authorized'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: 'Not found - No resource with provided Id'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: 'Conflict - Outdated version number or refusal of Service Provider to create a duplicate'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '412':
          description: 'Precondition failed - Failed to update. Resource has changed on the server.'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: 'Internal server error - Implementers provide a descriptive debugging advice'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '501':
          description: 'Not implemented - Service provider does not support the request'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'     
      security:
        - rbac_scim_auth:
          - delete:accounts
  /Applications/.search:
    post:
      tags:
        - Application
      summary: Get filtered or all Applications
      description: This endpoint returns all or filtered Applications. Utilize the request body (SearchRequest) parameters to configure filtering, sorting, pagination and in-/excluded attribues. After receiving an HTTP POST request, a response is returned as specified in [Section 3.4.2 of RFC7644](https://datatracker.ietf.org/doc/html/rfc7644#section-3.4.2).
      operationId: searchApplications
      requestBody:
        description: 'SearchRequest with the required parameters'
        content:
          application/scim+json:
            schema: 
              $ref: '#/components/schemas/SearchRequest'
      responses:
        '200':
          description: 'Success - list of all Applications'
          content:
            application/scim+json:
              schema:
                  $ref: '#/components/schemas/ApplicationListResponse'
        '307':
          description: 'Temporary redirect - Use the provided URI for the next request, but not permanently'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '308':
          description: 'Permanent redirect - Use the provided URI for the next request permanently'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '400':
          description: 'Bad request - See scimType for further information'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: 'Unauthorized - Authentication failed try again with a valid authentication'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: 'Forbidden - Authentication was successful but the user is not authorized'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: 'Not found - No resource with provided Id'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: 'Internal server error - Implementers provide a descriptive debugging advice'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '501':
          description: 'Not implemented - Service provider does not support the request'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - rbac_scim_auth:
            - read:applications
  /Applications:
    post:
      tags:
        - Application
      summary: Create new application
      description: Creates a new Application. Some attributes might be immutable, thus make sure these are set correctly for creation. Unset required attributes might lead to assertions or insertion of default values. Readonly attributes are ignored. The query parameters attribues and excludedAttributes refer to the response upon success. The id attributes is set by the Service Provider to ensure uniqueness.
      operationId: createApplication
      parameters:
        - in: query
          name: attributes
          schema:
            type: string
            example: id,entitlements,accounts
          description: A multi-valued list of strings indicating the names of resource attributes to return in the response, overriding the set of attributes that would be returned by default.  Attribute names MUST be in standard attribute notation (see [Section 3.10 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.10)) form. See [Section 3.9 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.9) for additional retrieval query parameters.
        - in: query
          name: excludedAttributes
          schema:
            type: string
            example: schema,meta
          description: A multi-valued list of strings indicating the names of resource attributes to be removed from the default set of attributes to return.  This parameter SHALL have no effect on attributes whose schema \"returned\" setting is \"always\" (see Sections [2.2](https://www.rfc-editor.org/rfc/rfc7644#section-2.2) and [7](https://www.rfc-editor.org/rfc/rfc7644#section-7) of RFC7644).  Attribute names MUST be in standard attribute notation ([Section 3.10 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.10)) form.  See [Section 3.9 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.9) for additional retrieval query parameters.
      requestBody:
        description: 'Content to create new application resource'
        content:
          application/scim+json:
            schema:
              $ref: '#/components/schemas/Application'
      responses:
        '201':
          description: 'Success - Application created'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Application'
        '307':
          description: 'Temporary redirect - Use the provided URI for the next request, but not permanently'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '308':
          description: 'Permanent redirect - Use the provided URI for the next request permanently'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '400':
          description: 'Bad request - See scimType for further information'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: 'Unauthorized - Authentication failed try again with a valid authentication'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: 'Forbidden - Authentication was successful but the user is not authorized'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: 'Not found - No resource with provided Id'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: 'Conflict - Outdated version number or refusal of Service Provider to create a duplicate'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: 'Internal server error - Implementers provide a descriptive debugging advice'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '501':
          description: 'Not implemented - Service provider does not support the request'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - rbac_scim_auth:
          - create:applications
    get:
      tags:
        - Application
      summary: Get filtered or all Applications
      description: This endpoint returns all or filtered Applications. Utilize the query parameters to configure filtering, sorting, pagination and in-/excluded attribues.
      operationId: getApplications
      parameters:
        - in: query
          name: filter
          schema:
            type: string
            example: filter=meta.lastModified gt "2011-05-13T04:42:34Z"
          description: Service providers may support filtering upon their resources. [Section 3.4.2.2 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.4.2.2) gives an overview on creating logical expressions for fitering. It includes attributes operators (eq, ne, co, sw, etc.), logical operators (and, or, not), grouping operators (for precedence or attribute filters), and expressing paths.
        - in: query
          name: sortBy
          schema:
            type: string
            example: id
          description: The \"sortBy\" parameter specifies the attribute whose value SHALL be used to order the returned responses.  If the \"sortBy\" attribute corresponds to a singular attribute, resources are sorted according to that attribute's value; if it's a multi-valued attribute, resources are sorted by the value of the primary attribute (see [Section 2.4 of RFC7643](https://www.rfc-editor.org/rfc/rfc7643#section-2.4)), if any, or else the first value in the list, if any.  If the attribute is complex, the attribute name must be a path to a sub-attribute in standard attribute notation (see [Section 3.10 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.10)), e.g., \"sortBy=name.givenName\". For all attribute types, if there is no data for the specified \"sortBy\" value, they are sorted via the \"sortOrder\" parameter, i.e., they are ordered last if ascending and first if descending.'
        - in: query
          name: sortOrder
          schema:
            type: string
            example: descending
            default: ascending
            enum:
              - ascending
              - descending
          description: The order in which the \"sortBy\" parameter is applied. Allowed values are \"ascending\" and \"descending\".  If a value for \"sortBy\" is provided and no \"sortOrder\" is specified, \"sortOrder\" SHALL default to ascending.  String type attributes are case insensitive by default, unless the attribute type is defined as a case-exact string.  \"sortOrder\" MUST sort according to the attribute type; i.e., for case-insensitive attributes, sort the result using case-insensitive Unicode alphabetic sort order with no specific locale implied, and for case-exact attribute types, sort the result using case-sensitive Unicode alphabetic sort order.
        - in: query
          name: startIndex
          schema:
            type: integer
            example: 2313
            default: 1
          description: The 1-based index of the first query result. A value less than 1 SHALL be interpreted as 1.
        - in: query
          name: count
          schema:
            type: integer
            example: 10
            default: 1000
          description: Non-negative integer. Specifies the desired maximum number of query results per page, e.g., 10. A negative value SHALL be interpreted as \"0\". A value of \"0\" indicates that no resource results are to be returned except for \"totalResults\". 
        - in: query
          name: attributes
          schema:
            type: string
            example: id,entitlements,accounts
          description: A multi-valued list of strings indicating the names of resource attributes to return in the response, overriding the set of attributes that would be returned by default.  Attribute names MUST be in standard attribute notation (see [Section 3.10 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.10)) form. See [Section 3.9 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.9) for additional retrieval query parameters.
        - in: query
          name: excludedAttributes
          schema:
            type: string
            example: schema,meta
          description: A multi-valued list of strings indicating the names of resource attributes to be removed from the default set of attributes to return.  This parameter SHALL have no effect on attributes whose schema \"returned\" setting is \"always\" (see Sections [2.2](https://www.rfc-editor.org/rfc/rfc7644#section-2.2) and [7](https://www.rfc-editor.org/rfc/rfc7644#section-7) of RFC7644).  Attribute names MUST be in standard attribute notation ([Section 3.10 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.10)) form.  See [Section 3.9 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.9) for additional retrieval query parameters.
      responses:
        '200':
          description: Success - list of all Applications
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/ApplicationListResponse'
        '307':
          description: 'Temporary redirect - Use the provided URI for the next request, but not permanently'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '308':
          description: 'Permanent redirect - Use the provided URI for the next request permanently'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '400':
          description: 'Bad request - See scimType for further information'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: 'Unauthorized - Authentication failed try again with a valid authentication'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: 'Forbidden - Authentication was successful but the user is not authorized'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: 'Not found - No resource with provided Id'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: 'Internal server error - Implementers provide a descriptive debugging advice'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '501':
          description: 'Not implemented - Service provider does not support the request'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - rbac_scim_auth:
          - read:applications
  /Applications/{id}:
    get:
      tags:
        - Application
      summary: Get application by Id
      description: Finds a single Application by its id attribute. Returned attributes might be specified or restricted with the query parameter attributes or excludedAttributes. Some attributes might not be readable according their schema definition.
      operationId: getApplicationById
      parameters:
        - name: id
          in: path
          description: Reference to the resouce which should be queried
          required: true
          schema:
            type: string
            format: uuid
        - in: query
          name: attributes
          schema:
            type: string
            example: id,entitlements,accounts
          description: A multi-valued list of strings indicating the names of resource attributes to return in the response, overriding the set of attributes that would be returned by default.  Attribute names MUST be in standard attribute notation (see [Section 3.10 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.10)) form. See [Section 3.9 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.9) for additional retrieval query parameters.
        - in: query
          name: excludedAttributes
          schema:
            type: string
            example: schema,meta
          description: A multi-valued list of strings indicating the names of resource attributes to be removed from the default set of attributes to return.  This parameter SHALL have no effect on attributes whose schema \"returned\" setting is \"always\" (see Sections [2.2](https://www.rfc-editor.org/rfc/rfc7644#section-2.2) and [7](https://www.rfc-editor.org/rfc/rfc7644#section-7) of RFC7644).  Attribute names MUST be in standard attribute notation ([Section 3.10 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.10)) form.  See [Section 3.9 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.9) for additional retrieval query parameters.
      responses:
        '200':
          description: 'Success - Application found'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Application'
        '307':
          description: 'Temporary redirect - Use the provided URI for the next request, but not permanently'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '308':
          description: 'Permanent redirect - Use the provided URI for the next request permanently'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '400':
          description: 'Bad request - See scimType for further information'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: 'Unauthorized - Authentication failed try again with a valid authentication'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: 'Forbidden - Authentication was successful but the user is not authorized'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: 'Not found - No resource with provided Id'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: 'Internal server error - Implementers provide a descriptive debugging advice'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '501':
          description: 'Not implemented - Service provider does not support the request'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - rbac_scim_auth:
          - read:applications
    put:
      tags:
        - Application
      summary: Update application by Id
      description: Updates a present Application. Unset required attributes might lead to assertions or insertion of default values. Readonly attributes are ignored. The query parameters attribues and excludedAttributes refer to the response upon success.
      operationId: updateApplicationById
      parameters:
        - name: id
          in: path
          description: Reference to the resouce which requires an update
          required: true
          schema:
            type: string
            format: uuid
        - in: query
          name: attributes
          schema:
            type: string
            example: id,entitlements,accounts
          description: A multi-valued list of strings indicating the names of resource attributes to return in the response, overriding the set of attributes that would be returned by default.  Attribute names MUST be in standard attribute notation (see [Section 3.10 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.10)) form. See [Section 3.9 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.9) for additional retrieval query parameters.
        - in: query
          name: excludedAttributes
          schema:
            type: string
            example: schema,meta
          description: A multi-valued list of strings indicating the names of resource attributes to be removed from the default set of attributes to return.  This parameter SHALL have no effect on attributes whose schema \"returned\" setting is \"always\" (see Sections [2.2](https://www.rfc-editor.org/rfc/rfc7644#section-2.2) and [7](https://www.rfc-editor.org/rfc/rfc7644#section-7) of RFC7644).  Attribute names MUST be in standard attribute notation ([Section 3.10 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.10)) form.  See [Section 3.9 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.9) for additional retrieval query parameters.
      requestBody:
        description: 'Content for updating an existing application by Id'
        content:
          application/scim+json:
            schema:
              $ref: '#/components/schemas/Application'
      responses:
        '200':
          description: 'Success - Application updated'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Application'
        '307':
          description: 'Temporary redirect - Use the provided URI for the next request, but not permanently'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '308':
          description: 'Permanent redirect - Use the provided URI for the next request permanently'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '400':
          description: 'Bad request - See scimType for further information'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: 'Unauthorized - Authentication failed try again with a valid authentication'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: 'Forbidden - Authentication was successful but the user is not authorized'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: 'Not found - No resource with provided Id'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: 'Conflict - Outdated version number or refusal of Service Provider to create a duplicate'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '412':
          description: 'Precondition failed - Failed to update. Resource has changed on the server.'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: 'Internal server error - Implementers provide a descriptive debugging advice'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '501':
          description: 'Not implemented - Service provider does not support the request'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - rbac_scim_auth:
          - update:applications
    patch:
      tags:
        - Application
      summary: Update application value(s) by Application Id
      description: Updates selected attributes of a present Application. Readonly attributes are ignored. The query parameters attribues and excludedAttributes refer to the response upon success. Invalid or non-existent attribute paths and invalid values lead to a HTTP status code 400 with a scimType containing the error type.  
      parameters:
        - name: id
          in: path
          description: Reference to the resouce which requires an update
          required: true
          schema:
            type: string
            format: uuid
        - in: query
          name: attributes
          schema:
            type: string
            example: id,entitlements,accounts
          description: A multi-valued list of strings indicating the names of resource attributes to return in the response, overriding the set of attributes that would be returned by default.  Attribute names MUST be in standard attribute notation (see [Section 3.10 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.10)) form. See [Section 3.9 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.9) for additional retrieval query parameters.
        - in: query
          name: excludedAttributes
          schema:
            type: string
            example: schema,meta
          description: A multi-valued list of strings indicating the names of resource attributes to be removed from the default set of attributes to return.  This parameter SHALL have no effect on attributes whose schema \"returned\" setting is \"always\" (see Sections [2.2](https://www.rfc-editor.org/rfc/rfc7644#section-2.2) and [7](https://www.rfc-editor.org/rfc/rfc7644#section-7) of RFC7644).  Attribute names MUST be in standard attribute notation ([Section 3.10 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.10)) form.  See [Section 3.9 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.9) for additional retrieval query parameters.
      requestBody:
        description: 'Content for updating an existent application by Id'
        content:
          application/scim+json:
            schema:
              $ref: '#/components/schemas/PatchOp'
      responses:
        '200':
          description: 'Success - Application value(s) updated'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Application'
        '307':
          description: 'Temporary redirect - Use the provided URI for the next request, but not permanently'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '308':
          description: 'Permanent redirect - Use the provided URI for the next request permanently'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '400':
          description: 'Bad request - See scimType for further information'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: 'Unauthorized - Authentication failed try again with a valid authentication'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: 'Forbidden - Authentication was successful but the user is not authorized'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: 'Not found - No resource with provided Id'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: 'Conflict - Outdated version number or refusal of Service Provider to create a duplicate'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '412':
          description: 'Precondition failed - Failed to update. Resource has changed on the server.'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: 'Internal server error - Implementers provide a descriptive debugging advice'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '501':
          description: 'Not implemented - Service provider does not support the request'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - rbac_scim_auth:
          - update:applications
    delete:
      tags:
        - Application
      summary: Delete application by Id
      description: Deletes a present Application. For subsequent requests on that resource and after successful deletion, a HTTP status code 404 is returned. 
      operationId: deleteApplicationById
      parameters:
        - name: id
          in: path
          description: Reference to the resouce which should be deleted
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: 'Success - Application deleted'
        '307':
          description: 'Temporary redirect - Use the provided URI for the next request, but not permanently'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '308':
          description: 'Permanent redirect - Use the provided URI for the next request permanently'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '400':
          description: 'Bad request - See scimType for further information'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: 'Unauthorized - Authentication failed try again with a valid authentication'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: 'Forbidden - Authentication was successful but the user is not authorized'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: 'Not found - No resource with provided Id'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: 'Conflict - Outdated version number or refusal of Service Provider to create a duplicate'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '412':
          description: 'Precondition failed - Failed to update. Resource has changed on the server.'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: 'Internal server error - Implementers provide a descriptive debugging advice'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '501':
          description: 'Not implemented - Service provider does not support the request'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'       
      security:
        - rbac_scim_auth:
          - delete:applications
  /SoDs/.search:
    post:
      tags:
        - SoD
      summary: Get filtered or all SoDs
      description: This endpoint returns all or filtered SoDs. Utilize the request body (SearchRequest) parameters to configure filtering, sorting, pagination and in-/excluded attribues. After receiving an HTTP POST request, a response is returned as specified in [Section 3.4.2 of RFC7644](https://datatracker.ietf.org/doc/html/rfc7644#section-3.4.2).
      operationId: searchSoDs
      requestBody:
        description: 'SearchRequest with the required parameters'
        content:
          application/scim+json:
            schema: 
              $ref: '#/components/schemas/SearchRequest'
      responses:
        '200':
          description: 'Success - list of all SoDs'
          content:
            application/scim+json:
              schema:
                  $ref: '#/components/schemas/SoDListResponse'
        '307':
          description: 'Temporary redirect - Use the provided URI for the next request, but not permanently'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '308':
          description: 'Permanent redirect - Use the provided URI for the next request permanently'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '400':
          description: 'Bad request - See scimType for further information'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: 'Unauthorized - Authentication failed try again with a valid authentication'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: 'Forbidden - Authentication was successful but the user is not authorized'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: 'Not found - No resource with provided Id'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: 'Internal server error - Implementers provide a descriptive debugging advice'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '501':
          description: 'Not implemented - Service provider does not support the request'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - rbac_scim_auth:
            - read:sods
  /SoDs:
    post:
      tags:
        - SoD
      summary: Create new SoD resource
      description: Creates a new SoD. Some attributes might be immutable, thus make sure these are set correctly for creation. Unset required attributes might lead to assertions or insertion of default values. Readonly attributes are ignored. The query parameters attribues and excludedAttributes refer to the response upon success. The id attributes is set by the Service Provider to ensure uniqueness.
      operationId: createSoD
      parameters:
        - in: query
          name: attributes
          schema:
            type: string
            example: id,exclusions,allowList
          description: A multi-valued list of strings indicating the names of resource attributes to return in the response, overriding the set of attributes that would be returned by default.  Attribute names MUST be in standard attribute notation (see [Section 3.10 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.10)) form. See [Section 3.9 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.9) for additional retrieval query parameters.
        - in: query
          name: excludedAttributes
          schema:
            type: string
            example: schema,meta
          description: A multi-valued list of strings indicating the names of resource attributes to be removed from the default set of attributes to return.  This parameter SHALL have no effect on attributes whose schema \"returned\" setting is \"always\" (see Sections [2.2](https://www.rfc-editor.org/rfc/rfc7644#section-2.2) and [7](https://www.rfc-editor.org/rfc/rfc7644#section-7) of RFC7644).  Attribute names MUST be in standard attribute notation ([Section 3.10 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.10)) form.  See [Section 3.9 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.9) for additional retrieval query parameters.
      requestBody:
        description: 'Content to create new SoD resource'
        content:
          application/scim+json:
            schema:
              $ref: '#/components/schemas/SoD'
      responses:
        '201':
          description: 'Success - SoD created'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/SoD'
        '307':
          description: 'Temporary redirect - Use the provided URI for the next request, but not permanently'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '308':
          description: 'Permanent redirect - Use the provided URI for the next request permanently'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '400':
          description: 'Bad request - See scimType for further information'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: 'Unauthorized - Authentication failed try again with a valid authentication'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: 'Forbidden - Authentication was successful but the user is not authorized'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: 'Not found - No resource with provided Id'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: 'Conflict - Outdated version number or refusal of Service Provider to create a duplicate'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: 'Internal server error - Implementers provide a descriptive debugging advice'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '501':
          description: 'Not implemented - Service provider does not support the request'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - rbac_scim_auth:
          - create:sods
    get:
      tags:
        - SoD
      summary: Get filtered or all SoDs
      description: This endpoint returns all or filtered SoDs. Utilize the query parameters to configure filtering, sorting, pagination and in-/excluded attribues.
      operationId: getSoDs
      parameters:
        - in: query
          name: filter
          schema:
            type: string
            example: filter=meta.lastModified gt "2011-05-13T04:42:34Z"
          description: Service providers may support filtering upon their resources. [Section 3.4.2.2 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.4.2.2) gives an overview on creating logical expressions for fitering. It includes attributes operators (eq, ne, co, sw, etc.), logical operators (and, or, not), grouping operators (for precedence or attribute filters), and expressing paths.
        - in: query
          name: sortBy
          schema:
            type: string
            example: id
          description: The \"sortBy\" parameter specifies the attribute whose value SHALL be used to order the returned responses.  If the \"sortBy\" attribute corresponds to a singular attribute, resources are sorted according to that attribute's value; if it's a multi-valued attribute, resources are sorted by the value of the primary attribute (see [Section 2.4 of RFC7643](https://www.rfc-editor.org/rfc/rfc7643#section-2.4)), if any, or else the first value in the list, if any.  If the attribute is complex, the attribute name must be a path to a sub-attribute in standard attribute notation (see [Section 3.10 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.10)), e.g., \"sortBy=name.givenName\". For all attribute types, if there is no data for the specified \"sortBy\" value, they are sorted via the \"sortOrder\" parameter, i.e., they are ordered last if ascending and first if descending.'
        - in: query
          name: sortOrder
          schema:
            type: string
            example: descending
            default: ascending
            enum:
              - ascending
              - descending
          description: The order in which the \"sortBy\" parameter is applied. Allowed values are \"ascending\" and \"descending\".  If a value for \"sortBy\" is provided and no \"sortOrder\" is specified, \"sortOrder\" SHALL default to ascending.  String type attributes are case insensitive by default, unless the attribute type is defined as a case-exact string.  \"sortOrder\" MUST sort according to the attribute type; i.e., for case-insensitive attributes, sort the result using case-insensitive Unicode alphabetic sort order with no specific locale implied, and for case-exact attribute types, sort the result using case-sensitive Unicode alphabetic sort order.
        - in: query
          name: startIndex
          schema:
            type: integer
            example: 2313
            default: 1
          description: The 1-based index of the first query result. A value less than 1 SHALL be interpreted as 1.
        - in: query
          name: count
          schema:
            type: integer
            example: 10
            default: 1000
          description: Non-negative integer. Specifies the desired maximum number of query results per page, e.g., 10. A negative value SHALL be interpreted as \"0\". A value of \"0\" indicates that no resource results are to be returned except for \"totalResults\". 
        - in: query
          name: attributes
          schema:
            type: string
            example: id,exclusions,allowList
          description: A multi-valued list of strings indicating the names of resource attributes to return in the response, overriding the set of attributes that would be returned by default.  Attribute names MUST be in standard attribute notation (see [Section 3.10 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.10)) form. See [Section 3.9 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.9) for additional retrieval query parameters.
        - in: query
          name: excludedAttributes
          schema:
            type: string
            example: schema,meta
          description: A multi-valued list of strings indicating the names of resource attributes to be removed from the default set of attributes to return.  This parameter SHALL have no effect on attributes whose schema \"returned\" setting is \"always\" (see Sections [2.2](https://www.rfc-editor.org/rfc/rfc7644#section-2.2) and [7](https://www.rfc-editor.org/rfc/rfc7644#section-7) of RFC7644).  Attribute names MUST be in standard attribute notation ([Section 3.10 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.10)) form.  See [Section 3.9 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.9) for additional retrieval query parameters.
      responses:
        '200':
          description: 'Success - list of all SoDs'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/SoDListResponse'
        '307':
          description: 'Temporary redirect - Use the provided URI for the next request, but not permanently'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '308':
          description: 'Permanent redirect - Use the provided URI for the next request permanently'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '400':
          description: 'Bad request - See scimType for further information'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: 'Unauthorized - Authentication failed try again with a valid authentication'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: 'Forbidden - Authentication was successful but the user is not authorized'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: 'Not found - No resource with provided Id'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: 'Internal server error - Implementers provide a descriptive debugging advice'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '501':
          description: 'Not implemented - Service provider does not support the request'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - rbac_scim_auth:
            - read:sods
  /SoDs/{id}:
    get:
      tags:
        - SoD
      summary: Get SoD by Id
      description: Finds a single SoD by its id attribute. Returned attributes might be specified or restricted with the query parameter attributes or excludedAttributes. Some attributes might not be readable according their schema definition.
      operationId: getSoDById
      parameters:
        - name: id
          in: path
          description: Reference to the resouce which should be queried
          required: true
          schema:
            type: string
            format: uuid
        - in: query
          name: attributes
          schema:
            type: string
            example: id,exclusions,allowList
          description: A multi-valued list of strings indicating the names of resource attributes to return in the response, overriding the set of attributes that would be returned by default.  Attribute names MUST be in standard attribute notation (see [Section 3.10 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.10)) form. See [Section 3.9 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.9) for additional retrieval query parameters.
        - in: query
          name: excludedAttributes
          schema:
            type: string
            example: schema,meta
          description: A multi-valued list of strings indicating the names of resource attributes to be removed from the default set of attributes to return.  This parameter SHALL have no effect on attributes whose schema \"returned\" setting is \"always\" (see Sections [2.2](https://www.rfc-editor.org/rfc/rfc7644#section-2.2) and [7](https://www.rfc-editor.org/rfc/rfc7644#section-7) of RFC7644).  Attribute names MUST be in standard attribute notation ([Section 3.10 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.10)) form.  See [Section 3.9 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.9) for additional retrieval query parameters.
      responses:
        '200':
          description: 'Success - SoD found'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/SoD'
        '307':
          description: 'Temporary redirect - Use the provided URI for the next request, but not permanently'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '308':
          description: 'Permanent redirect - Use the provided URI for the next request permanently'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '400':
          description: 'Bad request - See scimType for further information'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: 'Unauthorized - Authentication failed try again with a valid authentication'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: 'Forbidden - Authentication was successful but the user is not authorized'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: 'Not found - No resource with provided Id'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: 'Internal server error - Implementers provide a descriptive debugging advice'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '501':
          description: 'Not implemented - Service provider does not support the request'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - rbac_scim_auth:
          - read:sods
    put:
      tags:
        - SoD
      summary: Update SoD by Id
      description: Updates a present SoD. Unset required attributes might lead to assertions or insertion of default values. Readonly attributes are ignored. The query parameters attribues and excludedAttributes refer to the response upon success.
      operationId: updateSoDById
      parameters:
        - name: id
          in: path
          description: Reference to the resouce which requires an update
          required: true
          schema:
            type: string
            format: uuid
        - in: query
          name: attributes
          schema:
            type: string
            example: id,exclusions,allowList
          description: A multi-valued list of strings indicating the names of resource attributes to return in the response, overriding the set of attributes that would be returned by default.  Attribute names MUST be in standard attribute notation (see [Section 3.10 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.10)) form. See [Section 3.9 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.9) for additional retrieval query parameters.
        - in: query
          name: excludedAttributes
          schema:
            type: string
            example: schema,meta
          description: A multi-valued list of strings indicating the names of resource attributes to be removed from the default set of attributes to return.  This parameter SHALL have no effect on attributes whose schema \"returned\" setting is \"always\" (see Sections [2.2](https://www.rfc-editor.org/rfc/rfc7644#section-2.2) and [7](https://www.rfc-editor.org/rfc/rfc7644#section-7) of RFC7644).  Attribute names MUST be in standard attribute notation ([Section 3.10 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.10)) form.  See [Section 3.9 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.9) for additional retrieval query parameters.
      requestBody:
        description: 'Content for updating an existent user by Id'
        content:
          application/scim+json:
            schema:
              $ref: '#/components/schemas/SoD'
      responses:
        '200':
          description: 'Success - SoD updated'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/SoD'
        '307':
          description: 'Temporary redirect - Use the provided URI for the next request, but not permanently'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '308':
          description: 'Permanent redirect - Use the provided URI for the next request permanently'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '400':
          description: 'Bad request - See scimType for further information'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: 'Unauthorized - Authentication failed try again with a valid authentication'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: 'Forbidden - Authentication was successful but the user is not authorized'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: 'Not found - No resource with provided Id'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: 'Conflict - Outdated version number or refusal of Service Provider to create a duplicate'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '412':
          description: 'Precondition failed - Failed to update. Resource has changed on the server.'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: 'Internal server error - Implementers provide a descriptive debugging advice'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '501':
          description: 'Not implemented - Service provider does not support the request'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - rbac_scim_auth:
          - update:sods
    patch:
      tags:
        - SoD
      summary: Update SoD value(s) by SoD Id
      description: Updates selected attributes of a present SoD. Readonly attributes are ignored. The query parameters attribues and excludedAttributes refer to the response upon success. Invalid or non-existent attribute paths and invalid values lead to a HTTP status code 400 with a scimType containing the error type.  
      operationId: patchSoDById
      parameters:
        - name: id
          in: path
          description: Reference to the resouce which requires an update
          required: true
          schema:
            type: string
            format: uuid
        - in: query
          name: attributes
          schema:
            type: string
            example: id,exclusions,allowList
          description: A multi-valued list of strings indicating the names of resource attributes to return in the response, overriding the set of attributes that would be returned by default.  Attribute names MUST be in standard attribute notation (see [Section 3.10 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.10)) form. See [Section 3.9 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.9) for additional retrieval query parameters.
        - in: query
          name: excludedAttributes
          schema:
            type: string
            example: schema,meta
          description: A multi-valued list of strings indicating the names of resource attributes to be removed from the default set of attributes to return.  This parameter SHALL have no effect on attributes whose schema \"returned\" setting is \"always\" (see Sections [2.2](https://www.rfc-editor.org/rfc/rfc7644#section-2.2) and [7](https://www.rfc-editor.org/rfc/rfc7644#section-7) of RFC7644).  Attribute names MUST be in standard attribute notation ([Section 3.10 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.10)) form.  See [Section 3.9 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.9) for additional retrieval query parameters.
      requestBody:
        description: 'Content for updating an existent SoD by Id'
        content:
          application/scim+json:
            schema:
              $ref: '#/components/schemas/PatchOp'
      responses:
        '200':
          description: 'Success - SoD value(s) updated'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/SoD'
        '307':
          description: 'Temporary redirect - Use the provided URI for the next request, but not permanently'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '308':
          description: 'Permanent redirect - Use the provided URI for the next request permanently'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '400':
          description: 'Bad request - See scimType for further information'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: 'Unauthorized - Authentication failed try again with a valid authentication'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: 'Forbidden - Authentication was successful but the user is not authorized'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: 'Not found - No resource with provided Id'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: 'Conflict - Outdated version number or refusal of Service Provider to create a duplicate'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '412':
          description: 'Precondition failed - Failed to update. Resource has changed on the server.'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: 'Internal server error - Implementers provide a descriptive debugging advice'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '501':
          description: 'Not implemented - Service provider does not support the request'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - rbac_scim_auth:
          - update:sods
    delete:
      tags:
        - SoD
      summary: Delete SoD by Id
      description: Deletes a present SoD. For subsequent requests on that resource and after successful deletion, a HTTP status code 404 is returned. 
      operationId: deleteSoDByID
      parameters:
        - name: id
          in: path
          description: Reference to the resouce which should be deleted
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: 'Success - SoD deleted'
        '307':
          description: 'Temporary redirect - Use the provided URI for the next request, but not permanently'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '308':
          description: 'Permanent redirect - Use the provided URI for the next request permanently'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '400':
          description: 'Bad request - See scimType for further information'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: 'Unauthorized - Authentication failed try again with a valid authentication'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: 'Forbidden - Authentication was successful but the user is not authorized'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: 'Not found - No resource with provided Id'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: 'Conflict - Outdated version number or refusal of Service Provider to create a duplicate'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '412':
          description: 'Precondition failed - Failed to update. Resource has changed on the server.'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: 'Internal server error - Implementers provide a descriptive debugging advice'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '501':
          description: 'Not implemented - Service provider does not support the request'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - rbac_scim_auth:
          - delete:sods
  /Sessions/.search:
    post:
      tags:
        - Session
      summary: Get filtered or all Sessions
      description: This endpoint returns all or filtered Sessions. Utilize the request body (SearchRequest) parameters to configure filtering, sorting, pagination and in-/excluded attribues. After receiving an HTTP POST request, a response is returned as specified in [Section 3.4.2 of RFC7644](https://datatracker.ietf.org/doc/html/rfc7644#section-3.4.2).
      operationId: searchSessions
      requestBody:
        description: 'SearchRequest with the required parameters'
        content:
          application/scim+json:
            schema: 
              $ref: '#/components/schemas/SearchRequest'
      responses:
        '200':
          description: 'Success - list of allSessions'
          content:
            application/scim+json:
              schema:
                  $ref: '#/components/schemas/SessionListResponse'
        '307':
          description: 'Temporary redirect - Use the provided URI for the next request, but not permanently'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '308':
          description: 'Permanent redirect - Use the provided URI for the next request permanently'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '400':
          description: 'Bad request - See scimType for further information'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: 'Unauthorized - Authentication failed try again with a valid authentication'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: 'Forbidden - Authentication was successful but the user is not authorized'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: 'Not found - No resource with provided Id'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: 'Internal server error - Implementers provide a descriptive debugging advice'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '501':
          description: 'Not implemented - Service provider does not support the request'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - rbac_scim_auth:
            - read:sessions
  /Sessions:
    post:
      tags:
        - Session
      summary: Create new Session resource
      description: Creates a new Session. Some attributes might be immutable, thus make sure these are set correctly for creation. Unset required attributes might lead to assertions or insertion of default values. Readonly attributes are ignored. The query parameters attribues and excludedAttributes refer to the response upon success. The id attributes is set by the Service Provider to ensure uniqueness.
      operationId: createSession
      parameters:
        - in: query
          name: attributes
          schema:
            type: string
            example: id,active
          description: A multi-valued list of strings indicating the names of resource attributes to return in the response, overriding the set of attributes that would be returned by default.  Attribute names MUST be in standard attribute notation (see [Section 3.10 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.10)) form. See [Section 3.9 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.9) for additional retrieval query parameters.
        - in: query
          name: excludedAttributes
          schema:
            type: string
            example: schema,meta
          description: A multi-valued list of strings indicating the names of resource attributes to be removed from the default set of attributes to return.  This parameter SHALL have no effect on attributes whose schema \"returned\" setting is \"always\" (see Sections [2.2](https://www.rfc-editor.org/rfc/rfc7644#section-2.2) and [7](https://www.rfc-editor.org/rfc/rfc7644#section-7) of RFC7644).  Attribute names MUST be in standard attribute notation ([Section 3.10 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.10)) form.  See [Section 3.9 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.9) for additional retrieval query parameters.
      requestBody:
        description: 'Content to create new Session resource'
        content:
          application/scim+json:
            schema:
              $ref: '#/components/schemas/Session'
      responses:
        '201':
          description: 'Success - Session created'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Session'
        '307':
          description: 'Temporary redirect - Use the provided URI for the next request, but not permanently'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '308':
          description: 'Permanent redirect - Use the provided URI for the next request permanently'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '400':
          description: 'Bad request - See scimType for further information'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: 'Unauthorized - Authentication failed try again with a valid authentication'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: 'Forbidden - Authentication was successful but the user is not authorized'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: 'Not found - No resource with provided Id'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: 'Conflict - Outdated version number or refusal of Service Provider to create a duplicate'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: 'Internal server error - Implementers provide a descriptive debugging advice'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '501':
          description: 'Not implemented - Service provider does not support the request'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - rbac_scim_auth:
          - create:sessions
    get:
      tags:
        - Session
      summary: Get filtered or all Sessions
      description: This endpoint returns all or filtered Sessions. Utilize the query parameters to configure filtering, sorting, pagination and in-/excluded attribues.
      operationId: getSessions
      parameters:
        - in: query
          name: filter
          schema:
            type: string
            example: filter=meta.lastModified gt "2011-05-13T04:42:34Z"
          description: Service providers may support filtering upon their resources. [Section 3.4.2.2 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.4.2.2) gives an overview on creating logical expressions for fitering. It includes attributes operators (eq, ne, co, sw, etc.), logical operators (and, or, not), grouping operators (for precedence or attribute filters), and expressing paths.
        - in: query
          name: sortBy
          schema:
            type: string
            example: id
          description: The \"sortBy\" parameter specifies the attribute whose value SHALL be used to order the returned responses.  If the \"sortBy\" attribute corresponds to a singular attribute, resources are sorted according to that attribute's value; if it's a multi-valued attribute, resources are sorted by the value of the primary attribute (see [Section 2.4 of RFC7643](https://www.rfc-editor.org/rfc/rfc7643#section-2.4)), if any, or else the first value in the list, if any.  If the attribute is complex, the attribute name must be a path to a sub-attribute in standard attribute notation (see [Section 3.10 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.10)), e.g., \"sortBy=name.givenName\". For all attribute types, if there is no data for the specified \"sortBy\" value, they are sorted via the \"sortOrder\" parameter, i.e., they are ordered last if ascending and first if descending.'
        - in: query
          name: sortOrder
          schema:
            type: string
            example: descending
            default: ascending
            enum:
              - ascending
              - descending
          description: The order in which the \"sortBy\" parameter is applied. Allowed values are \"ascending\" and \"descending\".  If a value for \"sortBy\" is provided and no \"sortOrder\" is specified, \"sortOrder\" SHALL default to ascending.  String type attributes are case insensitive by default, unless the attribute type is defined as a case-exact string.  \"sortOrder\" MUST sort according to the attribute type; i.e., for case-insensitive attributes, sort the result using case-insensitive Unicode alphabetic sort order with no specific locale implied, and for case-exact attribute types, sort the result using case-sensitive Unicode alphabetic sort order.
        - in: query
          name: startIndex
          schema:
            type: integer
            example: 2313
            default: 1
          description: The 1-based index of the first query result. A value less than 1 SHALL be interpreted as 1.
        - in: query
          name: count
          schema:
            type: integer
            example: 10
            default: 1000
          description: Non-negative integer. Specifies the desired maximum number of query results per page, e.g., 10. A negative value SHALL be interpreted as \"0\". A value of \"0\" indicates that no resource results are to be returned except for \"totalResults\". 
        - in: query
          name: attributes
          schema:
            type: string
            example: id,active
          description: A multi-valued list of strings indicating the names of resource attributes to return in the response, overriding the set of attributes that would be returned by default.  Attribute names MUST be in standard attribute notation (see [Section 3.10 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.10)) form. See [Section 3.9 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.9) for additional retrieval query parameters.
        - in: query
          name: excludedAttributes
          schema:
            type: string
            example: schema,meta
          description: A multi-valued list of strings indicating the names of resource attributes to be removed from the default set of attributes to return.  This parameter SHALL have no effect on attributes whose schema \"returned\" setting is \"always\" (see Sections [2.2](https://www.rfc-editor.org/rfc/rfc7644#section-2.2) and [7](https://www.rfc-editor.org/rfc/rfc7644#section-7) of RFC7644).  Attribute names MUST be in standard attribute notation ([Section 3.10 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.10)) form.  See [Section 3.9 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.9) for additional retrieval query parameters.
      responses:
        '200':
          description: 'Success - list of all Sessions'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/SessionListResponse'
        '307':
          description: 'Temporary redirect - Use the provided URI for the next request, but not permanently'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '308':
          description: 'Permanent redirect - Use the provided URI for the next request permanently'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '400':
          description: 'Bad request - See scimType for further information'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: 'Unauthorized - Authentication failed try again with a valid authentication'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: 'Forbidden - Authentication was successful but the user is not authorized'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: 'Not found - No resource with provided Id'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: 'Internal server error - Implementers provide a descriptive debugging advice'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '501':
          description: 'Not implemented - Service provider does not support the request'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - rbac_scim_auth:
            - read:sessions
  /Sessions/{id}:
    get:
      tags:
        - Session
      summary: Get Session by Id
      description: Finds a single Session by its id attribute. Returned attributes might be specified or restricted with the query parameter attributes or excludedAttributes. Some attributes might not be readable according their schema definition.
      operationId: getSessionById
      parameters:
        - name: id
          in: path
          description: Reference to the resouce which should be queried
          required: true
          schema:
            type: string
            format: uuid
        - in: query
          name: attributes
          schema:
            type: string
            example: id,active
          description: A multi-valued list of strings indicating the names of resource attributes to return in the response, overriding the set of attributes that would be returned by default.  Attribute names MUST be in standard attribute notation (see [Section 3.10 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.10)) form. See [Section 3.9 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.9) for additional retrieval query parameters.
        - in: query
          name: excludedAttributes
          schema:
            type: string
            example: schema,meta
          description: A multi-valued list of strings indicating the names of resource attributes to be removed from the default set of attributes to return.  This parameter SHALL have no effect on attributes whose schema \"returned\" setting is \"always\" (see Sections [2.2](https://www.rfc-editor.org/rfc/rfc7644#section-2.2) and [7](https://www.rfc-editor.org/rfc/rfc7644#section-7) of RFC7644).  Attribute names MUST be in standard attribute notation ([Section 3.10 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.10)) form.  See [Section 3.9 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.9) for additional retrieval query parameters.
      responses:
        '200':
          description: 'Success - Session found'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Session'
        '307':
          description: 'Temporary redirect - Use the provided URI for the next request, but not permanently'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '308':
          description: 'Permanent redirect - Use the provided URI for the next request permanently'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '400':
          description: 'Bad request - See scimType for further information'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: 'Unauthorized - Authentication failed try again with a valid authentication'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: 'Forbidden - Authentication was successful but the user is not authorized'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: 'Not found - No resource with provided Id'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: 'Internal server error - Implementers provide a descriptive debugging advice'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '501':
          description: 'Not implemented - Service provider does not support the request'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - rbac_scim_auth:
          - read:sessions
    put:
      tags:
        - Session
      summary: Update Session by Id
      description: Updates a present Session. Unset required attributes might lead to assertions or insertion of default values. Readonly attributes are ignored. The query parameters attribues and excludedAttributes refer to the response upon success.
      operationId: updateSessionById
      parameters:
        - name: id
          in: path
          description: Reference to the resouce which requires an update
          required: true
          schema:
            type: string
            format: uuid
        - in: query
          name: attributes
          schema:
            type: string
            example: id,active
          description: A multi-valued list of strings indicating the names of resource attributes to return in the response, overriding the set of attributes that would be returned by default.  Attribute names MUST be in standard attribute notation (see [Section 3.10 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.10)) form. See [Section 3.9 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.9) for additional retrieval query parameters.
        - in: query
          name: excludedAttributes
          schema:
            type: string
            example: schema,meta
          description: A multi-valued list of strings indicating the names of resource attributes to be removed from the default set of attributes to return.  This parameter SHALL have no effect on attributes whose schema \"returned\" setting is \"always\" (see Sections [2.2](https://www.rfc-editor.org/rfc/rfc7644#section-2.2) and [7](https://www.rfc-editor.org/rfc/rfc7644#section-7) of RFC7644).  Attribute names MUST be in standard attribute notation ([Section 3.10 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.10)) form.  See [Section 3.9 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.9) for additional retrieval query parameters.
      requestBody:
        description: 'Content for updating an existent Session by Id'
        content:
          application/scim+json:
            schema:
              $ref: '#/components/schemas/Session'
      responses:
        '200':
          description: 'Success - Session updated'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Session'
        '307':
          description: 'Temporary redirect - Use the provided URI for the next request, but not permanently'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '308':
          description: 'Permanent redirect - Use the provided URI for the next request permanently'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '400':
          description: 'Bad request - See scimType for further information'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: 'Unauthorized - Authentication failed try again with a valid authentication'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: 'Forbidden - Authentication was successful but the user is not authorized'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: 'Not found - No resource with provided Id'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: 'Conflict - Outdated version number or refusal of Service Provider to create a duplicate'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '412':
          description: 'Precondition failed - Failed to update. Resource has changed on the server.'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: 'Internal server error - Implementers provide a descriptive debugging advice'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '501':
          description: 'Not implemented - Service provider does not support the request'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - rbac_scim_auth:
          - update:sessions
    patch:
      tags:
        - Session
      summary: Update Session value(s) by Session Id
      description: Updates selected attributes of a present Session. Readonly attributes are ignored. The query parameters attribues and excludedAttributes refer to the response upon success. Invalid or non-existent attribute paths and invalid values lead to a HTTP status code 400 with a scimType containing the error type.  
      operationId: patchSessionById
      parameters:
        - name: id
          in: path
          description: Reference to the resouce which requires an update
          required: true
          schema:
            type: string
            format: uuid
        - in: query
          name: attributes
          schema:
            type: string
            example: id,active
          description: A multi-valued list of strings indicating the names of resource attributes to return in the response, overriding the set of attributes that would be returned by default.  Attribute names MUST be in standard attribute notation (see [Section 3.10 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.10)) form. See [Section 3.9 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.9) for additional retrieval query parameters.
        - in: query
          name: excludedAttributes
          schema:
            type: string
            example: schema,meta
          description: A multi-valued list of strings indicating the names of resource attributes to be removed from the default set of attributes to return.  This parameter SHALL have no effect on attributes whose schema \"returned\" setting is \"always\" (see Sections [2.2](https://www.rfc-editor.org/rfc/rfc7644#section-2.2) and [7](https://www.rfc-editor.org/rfc/rfc7644#section-7) of RFC7644).  Attribute names MUST be in standard attribute notation ([Section 3.10 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.10)) form.  See [Section 3.9 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.9) for additional retrieval query parameters.
      requestBody:
        description: 'Content for updating an existent Session by Id'
        content:
          application/scim+json:
            schema:
              $ref: '#/components/schemas/PatchOp'
      responses:
        '200':
          description: 'Success - Session value(s) updated'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Session'
        '307':
          description: 'Temporary redirect - Use the provided URI for the next request, but not permanently'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '308':
          description: 'Permanent redirect - Use the provided URI for the next request permanently'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '400':
          description: 'Bad request - See scimType for further information'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: 'Unauthorized - Authentication failed try again with a valid authentication'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: 'Forbidden - Authentication was successful but the user is not authorized'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: 'Not found - No resource with provided Id'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: 'Conflict - Outdated version number or refusal of Service Provider to create a duplicate'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '412':
          description: 'Precondition failed - Failed to update. Resource has changed on the server.'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: 'Internal server error - Implementers provide a descriptive debugging advice'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '501':
          description: 'Not implemented - Service provider does not support the request'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - rbac_scim_auth:
          - update:sessions
    delete:
      tags:
        - Session
      summary: Delete Session by Id
      description: Deletes a present Session. For subsequent requests on that resource and after successful deletion, a HTTP status code 404 is returned. 
      operationId: deleteSessionByID
      parameters:
        - name: id
          in: path
          description: Reference to the resouce which should be deleted
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: 'Success - Session deleted'
        '307':
          description: 'Temporary redirect - Use the provided URI for the next request, but not permanently'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '308':
          description: 'Permanent redirect - Use the provided URI for the next request permanently'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '400':
          description: 'Bad request - See scimType for further information'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: 'Unauthorized - Authentication failed try again with a valid authentication'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: 'Forbidden - Authentication was successful but the user is not authorized'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: 'Not found - No resource with provided Id'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: 'Conflict - Outdated version number or refusal of Service Provider to create a duplicate'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '412':
          description: 'Precondition failed - Failed to update. Resource has changed on the server.'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: 'Internal server error - Implementers provide a descriptive debugging advice'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '501':
          description: 'Not implemented - Service provider does not support the request'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - rbac_scim_auth:
          - delete:sessions
  /.search:
    post:
      tags:
        - Utility
      summary: Get filtered or all Resources
      description: This endpoint returns all or filtered Resources. Utilize the request body (SearchRequest) parameters to configure filtering, sorting, pagination and in-/excluded attribues. After receiving an HTTP POST request, a response is returned as specified in [Section 3.4.2 of RFC7644](https://datatracker.ietf.org/doc/html/rfc7644#section-3.4.2).
      operationId: search
      requestBody:
        description: 'SearchRequest with the required parameters'
        content:
          application/scim+json:
            schema: 
              $ref: '#/components/schemas/SearchRequest'
      responses:
        '200':
          description: 'Success - list of all Users'
          content:
            application/scim+json:
              schema:
                  $ref: '#/components/schemas/GeneralListResponse'
        '307':
          description: 'Temporary redirect - Use the provided URI for the next request, but not permanently'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '308':
          description: 'Permanent redirect - Use the provided URI for the next request permanently'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '400':
          description: 'Bad request - See scimType for further information'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: 'Unauthorized - Authentication failed try again with a valid authentication'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: 'Forbidden - Authentication was successful but the user is not authorized'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: 'Not found - No resource with provided Id'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: 'Internal server error - Implementers provide a descriptive debugging advice'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '501':
          description: 'Not implemented - Service provider does not support the request'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - rbac_scim_auth:
            - read:users
            - read:groups
            - read:roles
            - read:entitlements
            - read:accounts
            - read:applications
            - read:sods
            - read:sessions
  /Bulk:
    post:
      tags:
        - Utility
      summary: Create, update or delete resources by a bulk request
      description: The SCIM bulk operation is an optional server feature that enables clients to send a potentially large collection of resource operations in a single request.  Support for bulk requests can be discovered by querying the service provider configuration (see [Section 4 of RFC7644](https://datatracker.ietf.org/doc/html/rfc7644#section-4)).  The body of a bulk operation contains a set of HTTP resource operations using one of the HTTP methods supported by the API, i.e., POST, PUT, PATCH, or DELETE. <p> Bulk requests are identified using the following schema URI \"urn:ietf:params:scim:api:messages:2.0:BulkRequest\".  Bulk responses are identified using the following URI \"urn:ietf:params:scim:api:messages:2.0:BulkResponse\".  Bulk requests and bulk responses share many attributes.  Unless otherwise specified, each attribute below is present in both bulk requests and bulk responses. <p> If a bulk job is processed successfully, HTTP response code 200 OK MUST be returned; otherwise, an appropriate HTTP error code MUST be returned. <p> The service provider MUST continue performing as many changes as possible and disregard partial failures.  The client MAY override this behavior by specifying a value for the \"failOnErrors\" attribute. The \"failOnErrors\" attribute defines the number of errors that the service provider should accept before failing the remaining operations returning the response. <p> To be able to reference a newly created resource, the bulkId attribute MAY be specified when creating new resources.  The \"bulkId\" is defined by the client as a surrogate identifier in a POST operation (see [Section 3.7.2 of RFC7644](https://datatracker.ietf.org/doc/html/rfc7644#section-3.7.2)).  The service provider MUST return the same \"bulkId\" together with the newly created resource.  The \"bulkId\" can then be used by the client to map the service provider id with the \"bulkId\" of the created resource. <p> A SCIM service provider MAY elect to optimize the sequence of operations received (e.g., to improve processing performance).  When doing so, the service provider MUST ensure that the client's intent is preserved and the same stateful result is achieved as for non-optimized processing.  For example, before a \"User\" can be added to a \"Group\", they must first be created.  Processing these requests out of order might result in a failure to add the new \"User\" to the \"Group\".
      operationId: bulk
      parameters:
        - in: query
          name: attributes
          schema:
            type: string
            example: id
          description: A multi-valued list of strings indicating the names of resource attributes to return in the response, overriding the set of attributes that would be returned by default.  Attribute names MUST be in standard attribute notation (see [Section 3.10 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.10)) form. See [Section 3.9 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.9) for additional retrieval query parameters.
        - in: query
          name: excludedAttributes
          schema:
            type: string
            example: schema,meta
          description: A multi-valued list of strings indicating the names of resource attributes to be removed from the default set of attributes to return.  This parameter SHALL have no effect on attributes whose schema \"returned\" setting is \"always\" (see Sections [2.2](https://www.rfc-editor.org/rfc/rfc7644#section-2.2) and [7](https://www.rfc-editor.org/rfc/rfc7644#section-7) of RFC7644).  Attribute names MUST be in standard attribute notation ([Section 3.10 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.10)) form.  See [Section 3.9 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.9) for additional retrieval query parameters.
      requestBody:
        description: 'A bulk request combining atomic requests boosting performance by sending them together.'
        content:
          application/scim+json:
            schema: 
              $ref: '#/components/schemas/BulkRequest'
      responses:
        '200':
          description: 'Success - list of all Users'
          content:
            application/scim+json:
              schema:
                  $ref: '#/components/schemas/BulkResponse'
        '307':
          description: 'Temporary redirect - Use the provided URI for the next request, but not permanently'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '308':
          description: 'Permanent redirect - Use the provided URI for the next request permanently'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '400':
          description: 'Bad request - See scimType for further information'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: 'Unauthorized - Authentication failed try again with a valid authentication'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: 'Forbidden - Authentication was successful but the user is not authorized'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: 'Not found - No resource with provided Id'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: 'Conflict - Outdated version number or refusal of Service Provider to create a duplicate'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '412':
          description: 'Precondition failed - Failed to update. Resource has changed on the server.'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '413':
          description: 'Payload too large - Try sending a smaller request.'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: 'Internal server error - Implementers provide a descriptive debugging advice'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '501':
          description: 'Not implemented - Service provider does not support the request'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - rbac_scim_auth:
            - cud:bulk
  /ServiceProviderConfig:
    get:
      operationId: getServiceProviderConfig
      tags:
        - Configuration
      summary: Get the ServiceProviderConfig (main settings)
      description: An HTTP GET to this endpoint will return a JSON structure that describes the SCIM specification features available on a service provider.  This endpoint SHALL return responses with a JSON object using a \"schemas\" attribute of \"urn:ietf:params:scim:schemas:core:2.0:ServiceProviderConfig\". The attributes returned in the JSON object are defined in [Section 5 of RFC7643](https://www.rfc-editor.org/rfc/rfc7643#section-5).
      parameters:
        - in: query
          name: attributes
          schema:
            type: string
            example: authenticationSchemes,rbacFeatures
          description: A multi-valued list of strings indicating the names of resource attributes to return in the response, overriding the set of attributes that would be returned by default.  Attribute names MUST be in standard attribute notation (see [Section 3.10 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.10)) form. See [Section 3.9 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.9) for additional retrieval query parameters.
        - in: query
          name: excludedAttributes
          schema:
            type: string
            example: schema,bulk
          description: A multi-valued list of strings indicating the names of resource attributes to be removed from the default set of attributes to return.  This parameter SHALL have no effect on attributes whose schema \"returned\" setting is \"always\" (see Sections [2.2](https://www.rfc-editor.org/rfc/rfc7644#section-2.2) and [7](https://www.rfc-editor.org/rfc/rfc7644#section-7) of RFC7644).  Attribute names MUST be in standard attribute notation ([Section 3.10 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.10)) form.  See [Section 3.9 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.9) for additional retrieval query parameters.
      responses:
        '200':
          description: 'Success - Session found'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/ServiceProviderConfig'
        '307':
          description: 'Temporary redirect - Use the provided URI for the next request, but not permanently'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '308':
          description: 'Permanent redirect - Use the provided URI for the next request permanently'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '400':
          description: 'Bad request - See scimType for further information'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: 'Unauthorized - Authentication failed try again with a valid authentication'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: 'Forbidden - Authentication was successful but the user is not authorized'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: 'Internal server error - Implementers provide a descriptive debugging advice'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '501':
          description: 'Not implemented - Service provider does not support the request'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - rbac_scim_auth:
          - read:spcs
  /Schemas:
    get:
      tags:
        - Configuration
      summary: Get all schemas
      description: "
        An HTTP GET to this endpoint is used to retrieve information about resource schemas supported by a SCIM service provider.  An HTTP GET to the endpoint \"/Schemas\" SHALL return all supported schemas in ListResponse format (see Figure 3).  Individual schema definitions can be returned by appending the schema URI to the /Schemas endpoint.  For example
        <p>/Schemas/urn:ietf:params:scim:schemas:core:2.0:User</p>
        The contents of each schema returned are described in [Section 7 of RFC7643](https://www.rfc-editor.org/rfc/rfc7643#section-7)."
      operationId: getSchemas
      parameters:
        - in: query
          name: filter
          schema:
            type: string
            example: filter=name eq "User"
          description: Service providers may support filtering upon their resources. [Section 3.4.2.2 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.4.2.2) gives an overview on creating logical expressions for fitering. It includes attributes operators (eq, ne, co, sw, etc.), logical operators (and, or, not), grouping operators (for precedence or attribute filters), and expressing paths.
        - in: query
          name: sortBy
          schema:
            type: string
            example: name
          description: The \"sortBy\" parameter specifies the attribute whose value SHALL be used to order the returned responses.  If the \"sortBy\" attribute corresponds to a singular attribute, resources are sorted according to that attribute's value; if it's a multi-valued attribute, resources are sorted by the value of the primary attribute (see [Section 2.4 of RFC7643](https://www.rfc-editor.org/rfc/rfc7643#section-2.4)), if any, or else the first value in the list, if any.  If the attribute is complex, the attribute name must be a path to a sub-attribute in standard attribute notation (see [Section 3.10 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.10)), e.g., \"sortBy=name.givenName\". For all attribute types, if there is no data for the specified \"sortBy\" value, they are sorted via the \"sortOrder\" parameter, i.e., they are ordered last if ascending and first if descending.'
        - in: query
          name: sortOrder
          schema:
            type: string
            example: descending
            default: ascending
            enum:
              - ascending
              - descending
          description: The order in which the \"sortBy\" parameter is applied. Allowed values are \"ascending\" and \"descending\".  If a value for \"sortBy\" is provided and no \"sortOrder\" is specified, \"sortOrder\" SHALL default to ascending.  String type attributes are case insensitive by default, unless the attribute type is defined as a case-exact string.  \"sortOrder\" MUST sort according to the attribute type; i.e., for case-insensitive attributes, sort the result using case-insensitive Unicode alphabetic sort order with no specific locale implied, and for case-exact attribute types, sort the result using case-sensitive Unicode alphabetic sort order.
        - in: query
          name: startIndex
          schema:
            type: integer
            example: 2313
            default: 1
          description: The 1-based index of the first query result. A value less than 1 SHALL be interpreted as 1.
        - in: query
          name: count
          schema:
            type: integer
            example: 10
            default: 1000
          description: Non-negative integer. Specifies the desired maximum number of query results per page, e.g., 10. A negative value SHALL be interpreted as \"0\". A value of \"0\" indicates that no resource results are to be returned except for \"totalResults\". 
        - in: query
          name: attributes
          schema:
            type: string
            example: name,attributes
          description: A multi-valued list of strings indicating the names of resource attributes to return in the response, overriding the set of attributes that would be returned by default.  Attribute names MUST be in standard attribute notation (see [Section 3.10 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.10)) form. See [Section 3.9 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.9) for additional retrieval query parameters.
        - in: query
          name: excludedAttributes
          schema:
            type: string
            example: schema,meta
          description: A multi-valued list of strings indicating the names of resource attributes to be removed from the default set of attributes to return.  This parameter SHALL have no effect on attributes whose schema \"returned\" setting is \"always\" (see Sections [2.2](https://www.rfc-editor.org/rfc/rfc7644#section-2.2) and [7](https://www.rfc-editor.org/rfc/rfc7644#section-7) of RFC7644).  Attribute names MUST be in standard attribute notation ([Section 3.10 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.10)) form.  See [Section 3.9 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.9) for additional retrieval query parameters.
      responses:
        '200':
          description: 'Success - list of all Sessions'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/SchemasListResponse'
        '307':
          description: 'Temporary redirect - Use the provided URI for the next request, but not permanently'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '308':
          description: 'Permanent redirect - Use the provided URI for the next request permanently'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '400':
          description: 'Bad request - See scimType for further information'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: 'Unauthorized - Authentication failed try again with a valid authentication'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: 'Forbidden - Authentication was successful but the user is not authorized'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: 'Not found - No resource with provided Id'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: 'Internal server error - Implementers provide a descriptive debugging advice'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '501':
          description: 'Not implemented - Service provider does not support the request'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - rbac_scim_auth:
          - read:schemas
  /Schemas/{urn}:
    get:
      tags:
        - Configuration
      summary: Get schema by urn
      description: "
        An HTTP GET to this endpoint is used to retrieve information about resource schemas supported by a SCIM service provider.  An HTTP GET to the endpoint \"/Schemas\" SHALL return all supported schemas in ListResponse format (see Figure 3).  Individual schema definitions can be returned by appending the schema URI to the /Schemas endpoint.  For example
        <p>/Schemas/urn:ietf:params:scim:schemas:core:2.0:User</p>
        The contents of each schema returned are described in [Section 7 of RFC7643](https://www.rfc-editor.org/rfc/rfc7643#section-7)."
      operationId: getSchemaByUrn
      parameters:
        - in: path
          name: urn
          schema:
            type: string
            format: urn
            example: urn:ietf:params:scim:schemas:core:2.0:User
          required: true
          description: Query an individual schema by passing its full urn.
        - in: query
          name: attributes
          schema:
            type: string
            example: name,attributes
          description: A multi-valued list of strings indicating the names of resource attributes to return in the response, overriding the set of attributes that would be returned by default.  Attribute names MUST be in standard attribute notation (see [Section 3.10 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.10)) form. See [Section 3.9 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.9) for additional retrieval query parameters.
        - in: query
          name: excludedAttributes
          schema:
            type: string
            example: schema,meta
          description: A multi-valued list of strings indicating the names of resource attributes to be removed from the default set of attributes to return.  This parameter SHALL have no effect on attributes whose schema \"returned\" setting is \"always\" (see Sections [2.2](https://www.rfc-editor.org/rfc/rfc7644#section-2.2) and [7](https://www.rfc-editor.org/rfc/rfc7644#section-7) of RFC7644).  Attribute names MUST be in standard attribute notation ([Section 3.10 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.10)) form.  See [Section 3.9 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.9) for additional retrieval query parameters.
      responses:
        '200':
          description: 'Success - list of all Sessions'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/SchemasListResponse'
        '307':
          description: 'Temporary redirect - Use the provided URI for the next request, but not permanently'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '308':
          description: 'Permanent redirect - Use the provided URI for the next request permanently'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '400':
          description: 'Bad request - See scimType for further information'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: 'Unauthorized - Authentication failed try again with a valid authentication'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: 'Forbidden - Authentication was successful but the user is not authorized'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: 'Not found - No resource with provided Id'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: 'Internal server error - Implementers provide a descriptive debugging advice'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '501':
          description: 'Not implemented - Service provider does not support the request'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - rbac_scim_auth:
          - read:schemas
  /ResourceTypes:
    get:
      operationId: getResourceTypes
      tags:
        - Configuration
      summary: Get all ResourceType resources.
      description: An HTTP GET to this endpoint is used to discover the types of resources available on a SCIM service provider (e.g., Users and Groups).  Each resource type defines the endpoints, the core schema URI that defines the resource, and any supported schema extensions.  The attributes defining a resource type can be found in [Section 6 of RFC7643](https://www.rfc-editor.org/rfc/rfc7643#section-6).
      parameters:
        - in: query
          name: filter
          schema:
            type: string
            example: filter=endpoint eq "/User"
          description: Service providers may support filtering upon their resources. [Section 3.4.2.2 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.4.2.2) gives an overview on creating logical expressions for fitering. It includes attributes operators (eq, ne, co, sw, etc.), logical operators (and, or, not), grouping operators (for precedence or attribute filters), and expressing paths.
        - in: query
          name: sortBy
          schema:
            type: string
            example: endpoint
          description: The \"sortBy\" parameter specifies the attribute whose value SHALL be used to order the returned responses.  If the \"sortBy\" attribute corresponds to a singular attribute, resources are sorted according to that attribute's value; if it's a multi-valued attribute, resources are sorted by the value of the primary attribute (see [Section 2.4 of RFC7643](https://www.rfc-editor.org/rfc/rfc7643#section-2.4)), if any, or else the first value in the list, if any.  If the attribute is complex, the attribute name must be a path to a sub-attribute in standard attribute notation (see [Section 3.10 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.10)), e.g., \"sortBy=name.givenName\". For all attribute types, if there is no data for the specified \"sortBy\" value, they are sorted via the \"sortOrder\" parameter, i.e., they are ordered last if ascending and first if descending.'
        - in: query
          name: sortOrder
          schema:
            type: string
            example: descending
            default: ascending
            enum:
              - ascending
              - descending
          description: The order in which the \"sortBy\" parameter is applied. Allowed values are \"ascending\" and \"descending\".  If a value for \"sortBy\" is provided and no \"sortOrder\" is specified, \"sortOrder\" SHALL default to ascending.  String type attributes are case insensitive by default, unless the attribute type is defined as a case-exact string.  \"sortOrder\" MUST sort according to the attribute type; i.e., for case-insensitive attributes, sort the result using case-insensitive Unicode alphabetic sort order with no specific locale implied, and for case-exact attribute types, sort the result using case-sensitive Unicode alphabetic sort order.
        - in: query
          name: startIndex
          schema:
            type: integer
            example: 2313
            default: 1
          description: The 1-based index of the first query result. A value less than 1 SHALL be interpreted as 1.
        - in: query
          name: count
          schema:
            type: integer
            example: 10
            default: 1000
          description: Non-negative integer. Specifies the desired maximum number of query results per page, e.g., 10. A negative value SHALL be interpreted as \"0\". A value of \"0\" indicates that no resource results are to be returned except for \"totalResults\". 
        - in: query
          name: attributes
          schema:
            type: string
            example: id,endpoint
          description: A multi-valued list of strings indicating the names of resource attributes to return in the response, overriding the set of attributes that would be returned by default.  Attribute names MUST be in standard attribute notation (see [Section 3.10 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.10)) form. See [Section 3.9 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.9) for additional retrieval query parameters.
        - in: query
          name: excludedAttributes
          schema:
            type: string
            example: schema,schemaExtensions
          description: A multi-valued list of strings indicating the names of resource attributes to be removed from the default set of attributes to return.  This parameter SHALL have no effect on attributes whose schema \"returned\" setting is \"always\" (see Sections [2.2](https://www.rfc-editor.org/rfc/rfc7644#section-2.2) and [7](https://www.rfc-editor.org/rfc/rfc7644#section-7) of RFC7644).  Attribute names MUST be in standard attribute notation ([Section 3.10 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.10)) form.  See [Section 3.9 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.9) for additional retrieval query parameters.
      responses:
        '200':
          description: 'Success - ResourceType found'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/ResourceTypeListResponse'
        '307':
          description: 'Temporary redirect - Use the provided URI for the next request, but not permanently'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '308':
          description: 'Permanent redirect - Use the provided URI for the next request permanently'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '400':
          description: 'Bad request - See scimType for further information'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: 'Unauthorized - Authentication failed try again with a valid authentication'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: 'Forbidden - Authentication was successful but the user is not authorized'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: 'Not found - No resource with provided Id'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: 'Internal server error - Implementers provide a descriptive debugging advice'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
        '501':
          description: 'Not implemented - Service provider does not support the request'
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - rbac_scim_auth:
          - read:resTypes
components:
  schemas:
  #Base Schema: Resource
    Resource:
      type: object
      description: The resource is the base class to represent the entities of this RBAC REST API. It holds the attributes necessary for all actual resources (User, Group, Role, etc.).
      properties:
        schemas:
          description: The schema(s) involved in the SCIM resource.
          type: array
          items:
            type: string
        id:
          type: string
          format: uuid
          description: A unique identifier for a SCIM resource as defined by the service provider.  Each representation of the resource MUST include a non-empty \"id\" value.  This identifier MUST be unique across the SCIM service provider's entire set of resources.  It MUST be a stable, non-reassignable identifier that does not change when the same resource is returned in subsequent requests.  The value of the \"id\" attribute is always issued by the service provider and MUST NOT be specified by the client.  The string \"bulkId\" is a reserved keyword and MUST NOT be used within any unique identifier value.  The attribute characteristics are \"caseExact\" as \"true\", a mutability of \"readOnly\", and a \"returned\" characteristic of \"always\".  See [Section 9 RFC7643](https://www.rfc-editor.org/rfc/rfc7643.html#section-9) for additional considerations regarding privacy.
        externalId:
          type: string
          format: uuid
          description: A String that is an identifier for the resource as defined by the provisioning client.  The \"externalId\" may simplify identification of a resource between the provisioning client and the service provider by allowing the client to use a filter to locate the resource with an identifier from the provisioning domain, obviating the need to store a local mapping between the provisioning domain's identifier of the resource and the identifier used by the service provider.  Each resource MAY include a non-empty \"externalId\" value.  The value of the \"externalId\" attribute is always issued by the provisioning client and MUST NOT be specified by the service provider.  The service provider MUST always interpret the externalId as scoped to the provisioning domain.  While the server does not enforce uniqueness, it is assumed that the value's uniqueness is controlled by the client setting the value.  See [Section 9 RFC7643](https://www.rfc-editor.org/rfc/rfc7643.html#section-9) for additional considerations regarding privacy.  This attribute has \"caseExact\" as \"true\" and a mutability of \"readWrite\".  This attribute is OPTIONAL.
        type:
          description: An additional type description of a resource
          type: string
        meta:
          description: A complex attribute containing resource metadata.  All \"meta\" sub-attributes are assigned by the service provider (have a \"mutability\" of \"readOnly\"), and all of these sub-attributes have a \"returned\" characteristic of \"default\".  This attribute SHALL be ignored when provided by clients.  \"meta\" contains the following sub-attributes
          properties:
            resourceType:
              description: The name of the resource type of the resource.  This attribute has a mutability of \"readOnly\" and \"caseExact\" as \"true\".
              type: string
            created:
              description: The \"DateTime\" that the resource was added to the service provider.  This attribute MUST be a DateTime.
              type: string
              format: date-time
              example: '2022-02-11T01:34:04.074-05:00'
            lastModified:
              description: The most recent DateTime that the details of this resource were updated at the service provider.  If this resource has never been modified since its initial creation, the value MUST be the same as the value of \"created\".
              type: string
              format: date-time
              example: '2022-02-11T01:08:45.866-05:00'
            version:
              description: The version of the resource being returned.  This value must be the same as the entity-tag (ETag) HTTP response header (see Sections 2.1 and 2.3 of [RFC7232]).  This attribute has \"caseExact\" as \"true\".  Service provider support for this attribute is optional and subject to the service provider's support for versioning (see Section 3.14 of [RFC7644]).  If a service provider provides \"version\" (entity-tag) for a representation and the generation of that entity-tag does not satisfy all of the characteristics of a strong validator (see Section 2.1 of [RFC7232]), then the origin server MUST mark the \"version\" (entity-tag) as weak by prefixing its opaque value with \"W/\" (case sensitive).
              type: string
            location:
              description: The URI of the resource being returned.  This value MUST be the same as the \"Content-Location\" HTTP response header (see Section 3.1.4.2 of [RFC7231]).
              type: string
              format: uri
              example: 'https://example.com/v2/{ResourceType}/2819c223-7f76-453a-919d-413861904646'
      required:
        - id
        - schemas
  #Base Schema: Assignment
    Assignment:
      description: An assignment refers to another resource. As it is attached to an assigning resource only another assignee is required. Furthermore, when modifying this assignment only the id attribute of the resource is required to transmit. Other attributes are readOnly.
      type: object
      properties:
        resource:
          $ref: '#/components/schemas/Resource'
  #Schemas of Ressource-Types:
  #User:
    User:
      allOf:
        #description: use all attributes of schema Resource
        - $ref: '#/components/schemas/Resource'
      description: SCIM provides a resource type for \"User\" resources.  The core schema for \"User\" is identified using the following schema URI \"urn:ietf:params:scim:schemas:core:2.0:User\".  The following attributes are defined in addition to the core schema attributes
      properties:
        #description: all properties of SCIM User resource
        userName:
          description: A service provider's unique identifier for the user, typically used by the user to directly authenticate to the service provider. Often displayed to the user as their unique identifier within the system (as opposed to \"id\" or \"externalId\", which are generally opaque and not user-friendly identifiers).  Each User MUST include a non-empty userName value.  This identifier MUST be unique across the service provider's entire set of Users.  This attribute is REQUIRED and is case insensitive.
          example: bjensen@example.com
          type: string
        name:
          description: The components of the user's name.  Service providers MAY return just the full name as a single string in the formatted sub-attribute, or they MAY return just the individual component attributes using the other sub-attributes, or they MAY return both.  If both variants are returned, they SHOULD be describing the same name, with the formatted name indicating how the component attributes should be combined.
          type: array
          items:
            properties:
              formatted:
                description: The full name, including all middle names, titles, and suffixes as appropriate, formatted for display (e.g., \"Ms. Barbara Jane Jensen, III\").
                type: string
                example: Ms. Barbara Jane Jensen, III
              familyName:
                description: The family name of the User, or last name in most Western languages (e.g., \"Jensen\" given the full name \"Ms. Barbara Jane Jensen, III\").
                type: string
                example: Jensen
              givenName:
                description: The given name of the User, or first name in most Western languages (e.g., \"Barbara\" given the full name \"Ms. Barbara Jane Jensen, III\").
                type: string
                example: Barbara
              middleName:
                description: The middle name(s) of the User (e.g., \"Jane\" given the full name \"Ms. Barbara Jane Jensen, III\").
                type: string
                example: Jane
              honorificPrefix:
                description: The honorific prefix(es) of the User, or title in most Western languages (e.g., \"Ms.\" given the full name \"Ms. Barbara Jane Jensen, III\").
                type: string
                example: Ms.
              honorificSuffix:
                description: The honorific suffix(es) of the User, or suffix in most Western languages (e.g., \"III\" given the full name \"Ms. Barbara Jane Jensen, III\").
                type: string
                example: III
        displayName:
          type: string
          description: The name of the user, suitable for display to end-users.  Each user returned MAY include a non-empty displayName value.  The name SHOULD be the full name of the User being described, if known (e.g., \"Babs Jensen\" or \"Ms. Barbara J Jensen, III\") but MAY be a username or handle, if that is all that is available (e.g., \"bjensen\").  The value provided SHOULD be the primary textual label by which this User is normally displayed by the service provider when presenting it to end-users.
          example: Babs Jensen
        nickName:
          description: The casual way to address the user in real life, e.g., \"Bob\" or \"Bobby\" instead of \"Robert\".  This attribute SHOULD NOT be used to represent a User's username (e.g., bjensen or mpepperidge).
          type: string
          example: Bob (instead of Robert)
        profileUrl:
          description: A URI that is a uniform resource locator (as defined in Section 1.1.3 of [RFC3986]) and that points to a location representing the user's online profile (e.g., a web page).  URIs are canonicalized per Section 6.2 of [RFC3986].
          type: string
          format: uri
          example: https://www.linkedin.com/in/user-123/
        title:
          description: The user's title, such as \"Vice President\".
          type: string
          example: Vice President
        userType:
          description: Used to identify the relationship between the organization and the user.  Typical values used might be \"Contractor\", \"Employee\", \"Intern\", \"Temp\", \"External\", and \"Unknown\", but any value may be used.
          type: string
          example: Contractor
        preferredLanguage:
          description: Indicates the user's preferred written or spoken languages and is generally used for selecting a localized user interface.  The value indicates the set of natural languages that are preferred. The format of the value is the same as the HTTP Accept-Language header field (not including \"Accept-Language:\") and is specified in Section 5.3.5 of [RFC7231].  The intent of this value is to enable cloud applications to perform matching of language tags [RFC4647] to the user's language preferences, regardless of what may be indicated by a user agent (which might be shared), or in an interaction that does not involve a user (such as in a delegated OAuth 2.0 [RFC6749] style interaction) where normal HTTP Accept-Language header negotiation cannot take place.
          type: string
        locale:
          description: "
            Used to indicate the User's default location for purposes of localizing such items as currency, date time format, or numerical representations.  A valid value is a language tag as defined in [RFC5646].  Computer languages are explicitly excluded. 

            A language tag is a sequence of one or more case-insensitive sub-tags, each separated by a hyphen character (\"-\", %x2D).  For backward compatibility, servers MAY accept tags separated by an underscore character (\"_\", %x5F).  In most cases, a language tag consists of a primary language sub-tag that identifies a broad family of related languages (e.g., \"en\" = English) and that is optionally followed by a series of sub-tags that refine or narrow that language's range (e.g., \"en-CA\" = the variety of English as communicated in Canada).  Whitespace is not allowed within a language tag.  Example tags include

            <p>fr, en-US, es-419, az-Arab, x-pig-latin, man-Nkoo-GN</p> 

            See [RFC5646] for further information.
          "
          type: string
          example: en_US
        timezone:
          description: The User's time zone, in IANA Time Zone database format [RFC6557], also known as the \"Olson\" time zone database format [Olson-TZ] (e.g., \"America/Los_Angeles\").
          type: string
          example: America/Los_Angeles
        active:
          description: A Boolean value indicating the user's administrative status. The definitive meaning of this attribute is determined by the service provider. As a typical example, a value of true implies that the user is able to log in, while a value of false implies that the user's account has been suspended.
          type: boolean
          example: true
        password:
          description: "
            This attribute is intended to be used as a means to set, replace, or compare (i.e., filter for equality) a password.  The cleartext value or the hashed value of a password SHALL NOT be returnable by a service provider.  If a service provider holds the value locally, the value SHOULD be hashed.  When a password is set or changed by the client, the cleartext password SHOULD be processed by the service provider as follows

            <ul>
              <li>Prepare the cleartext value for international language comparison.  See Section 7.8 of [RFC7644].</li>
              <li>Validate the value against server password policy.  Note, The definition and enforcement of password policy are beyond the scope of this document.</li>
              <li>Ensure that the value is encrypted (e.g., hashed).  See Section 9.2 of [RFC7643] for acceptable hashing and encryption handling when storing or persisting for provisioning workflow reasons.</li>
            </ul>

            A service provider that immediately passes the cleartext value on to another system or programming interface MUST pass the value directly over a secured connection (e.g., Transport Layer Security (TLS)).  If the value needs to be temporarily persisted for a period of time (e.g., because of a workflow) before provisioning, then the value MUST be protected by some method, such as encryption.
            
            Testing for an equality match MAY be supported if there is an existing stored hashed value.  When testing for equality, the service provider

            <ul>
                <li>Prepares the filter value for international language comparison.  See Section 7.8 of [RFC7644].</li>
                <li>Generates the salted hash of the filter value and tests for a match with the locally held value.</li>
            </ul>
            
            The mutability of the password attribute is \"writeOnly\", indicating that the value MUST NOT be returned by a service provider in any form (the attribute characteristic \"returned\" is \"never\").
          "
          type: string
          format: password
        emails:
          description: Email addresses for the User.  The value SHOULD be specified according to [RFC5321].  Service providers SHOULD canonicalize the value according to [RFC5321], e.g., \"bjensen@example.com\" instead of \"bjensen@EXAMPLE.COM\".  The \"display\" sub-attribute MAY be used to return the canonicalized representation of the email value. The \"type\" sub-attribute is used to provide a classification meaningful to the (human) user.  The user interface should encourage the use of basic values of \"work\", \"home\", and \"other\" and MAY allow additional type values to be used at the discretion of SCIM clients.
          type: array
          items:
            properties:
              value:
                description: should return canonicalized representation of the email value
                type: string
                format: email
                example: bjensen@EXAMPLE.COM
              display:
                description: the canonicalized representation of the email value
                type: string
                format: email
                example: bjensen@example.com
              type:
                description: Type of email address (work, home, other)
                type: string
                example: work
              primary:
                description: boolean value to indicate the primary mail address
                type: boolean
                example: true
            required:
              - value
        phoneNumbers:
          description: Phone numbers for the user.  The value SHOULD be specified according to the format defined in [RFC3966], e.g., 'tel:+1-201-555-0123'.  Service providers SHOULD canonicalize the value according to [RFC3966] format, when appropriate.  The \"display\" sub-attribute MAY be used to return the canonicalized representation of the phone number value.  The sub-attribute \"type\" often has typical values of \"work\", \"home\", \"mobile\", \"fax\", \"pager\", and \"other\" and MAY allow more types to be defined by the SCIM clients.
          type: array
          items:
            properties:
              value:
                description: should return canonicalized representation of the phone value
                type: string
                format: string
                example: tel:+1-201-555-0123
              display:
                description: the canonicalized representation of the phone number value
                type: string
                format: string
                example: tel:+1-201-555-0123
              type:
                description: Type of phone numer (work, home, mobile, fax, pager, other)
                type: string
                example: work
        ims:
          description: Instant messaging address for the user.  No official canonicalization rules exist for all instant messaging addresses, but service providers SHOULD, when appropriate, remove all whitespace and convert the address to lowercase.  The \"type\" sub-attribute SHOULD take one of the following values, \"aim\", \"gtalk\", \"icq\", \"xmpp\", \"msn\", \"skype\", \"qq\", \"yahoo\", or \"other\" (representing currently popular IM services at the time of this writing).  Service providers MAY add further values if new IM services are introduced and MAY specify more detailed canonicalization rules for each possible value.
          type: array
          items:
            properties:
              value:
                description: representation of the ims value
                type: string
                format: string
                example: teams
              type:
                description: Type of ims (aim, gtalk, icq, xmpp, msn, skype, qq, yahoo, other)
                type: string
                example: skype
        photos:
          description: A URI that is a uniform resource locator (as defined in Section 1.1.3 of [RFC3986]) that points to a resource location representing the user's image.  The resource MUST be a file (e.g., a GIF, JPEG, or PNG image file) rather than a web page containing an image.  Service providers MAY return the same image in different sizes, although it is recognized that no standard for describing images of various sizes currently exists.  Note that this attribute SHOULD NOT be used to send down arbitrary photos taken by this user; instead, profile photos of the user that are suitable for display when describing the user should be sent. Instead of the standard canonical values for type, this attribute defines the following canonical values to represent popular photo sizes \"photo\" and \"thumbnail\".
          type: array
          items:
            properties:
              value:
                description: the URI to photo location
                type: string
                format: uri
                example: https://example.com/123456/
              type:
                description: Type of photo (photo, thumbnail)
                type: string
                example: thumbnail
        addresses:
          description: A physical mailing address for this user.  Canonical type values of \"work\", \"home\", and \"other\".  This attribute is a complex type with the following sub-attributes.  All sub-attributes are OPTIONAL.
          type: array
          items:
            properties:
              formatted:
                description: The full mailing address, formatted for display or use with a mailing label.  This attribute MAY contain newlines.
                type: string
                format: string
                example: One Apple Park Way, Cupertino, CA 95014, US
              streetAddress:
                description: The full street address component, which may include house number, street name, P.O. box, and multi-line extended street address information.  This attribute MAY contain newlines.
                type: string
                example: One Apple Park Way
              locality:
                description: The city or locality component.
                type: string
                example: Cupertino
              region:
                description: The state or region component.
                type: string
                example: CA
              postalCode:
                description: The zip code or postal code component.
                type: number
                example: 95014
              country:
                description: The country name component.  When specified, the value MUST be in ISO 3166-1 \"alpha-2\" code format [ISO3166]; e.g., the United States and Sweden are \"US\" and \"SE\", respectively.
                type: string
                example: US
        groups:
          description: Assigned Groups for the User
          type: array
          items:
            $ref: '#/components/schemas/UserGroupAssignment'
        roles:
          description: Assigned Roles for the User
          type: array
          items: 
            $ref: '#/components/schemas/RoleUserAssignment'
        accounts:
          description: Assigned Accounts for the User
          type: array
          items: 
            $ref: '#/components/schemas/UserAccountAssignment'
        x509Certificates:
          description: A list of certificates associated with the resource (e.g., a User).  Each value contains exactly one DER-encoded X.509 certificate (see Section 4 of [RFC5280]), which MUST be base64 encoded per Section 4 of [RFC4648].  A single value MUST NOT contain multiple certificates and so does not contain the encoding \"SEQUENCE OF Certificate\" in any guise.
          type: array
          items:
            type: string
            format: base64
        allowlistSoDs:
          description: Allowedlisted SoDs for the User
          type: array
          items:
            $ref: '#/components/schemas/SoDUserAssignment'
        sessions:
          description: Activated Sessions for the User
          type: array
          items:
            $ref: '#/components/schemas/SessionUserAssignment'
      required:
        - userName
  #Group:
    Group:
      description: SCIM provides a schema for representing groups, identified using the following schema URI \"urn:ietf:params:scim:schemas:core:2.0:Group\".
        <br>
        \"Group\" resources are meant to enable expression of common group-based or role-based access control models, although no explicit authorization model is defined.  It is intended that the semantics of group membership, and any behavior or authorization granted as a result of membership, are defined by the service provider; these are considered out of scope for this specification.
      allOf:
        - $ref: '#/components/schemas/Resource'
      properties:
        displayName:
          type: string
          description: A human-readable name for the Group.  REQUIRED.
        members:
          type: array
          description: Assigned Users or nested Groups for this Group
          items:
            oneOf:
              - $ref: '#/components/schemas/GroupGroupAssignment'
              - $ref: '#/components/schemas/UserGroupAssignment'
        allowListSoDs:
          description: Allowlisted SoDs for this Group
          type: array
          items:
            $ref: '#/components/schemas/SoDGroupAssignment'
      required:
        - displayName
  #Role
    Role:
      description: Roles are an intermediate for Users and Entitlements. A Role thus has Assignments for both of them attached. Additionally, a Role might contained or be contained by other Roles to model hierarchies. Constraints for a role are covered by further attributes. Furthermore, a Role has a set of active sessions.
      allOf:
        - $ref: '#/components/schemas/Resource'
      properties:
        displayName:
          type: string
          description: A human-readable name, primarily used for display purposes. OPTIONAL.
          example: Trainee Role
        enabled:
          type: boolean
          description: A boolean type that indicates if the role is enabled and usable in the SCIM service provider's system.  REQUIRED.
          example: true
        limitedAssignmentsPermitted: 
          type: boolean
          description: "A boolean type that indicates if a limited number of users may be assigned this role. A value of false should be interpreted as no numerical restriction on the number of users that may hold this role. Other restrictions may exist.  RECOMMENDED."
          example: true
        totalAssignmentsPermitted:
          type: number
          description: "An integer type that indicates how many users may be assigned this role, either directly or inherited. OPTIONAL, but RECOMMENDED if assignments are restricted to a certain number."
          example: 100
        totalAssignmentsUsed: 
          type: number
          description: "An integer type that indicates how many users are currently assigned this role, either directly or inherited. OPTIONAL, but RECOMMENDED if assignments are restricted to a certain number."
          example: 42
        users:
          description: Assigned Users for the Role.
          type: array
          items: 
            $ref: '#/components/schemas/RoleUserAssignment'
        entitlements:
          description: Assigned Entitlements for the Role.
          type: array
          items: 
            $ref: '#/components/schemas/RoleEntitlementAssignment'
        contains:
          description: A list of \"child\" roles that this role grants the rights of. OPTIONAL.
          type: array
          items:
            $ref: '#/components/schemas/RoleRoleAssignment'
        containedBy:
          description: A list of \"parent\" roles that contain a superset of permissions including those granted by this role. OPTIONAL.
          type: array
          items:
            $ref: '#/components/schemas/RoleRoleAssignment'
        sessions:
          type: array
          items:
            $ref: '#/components/schemas/SessionRoleAssignment'
      required:
        - enabled
        - users
        - entitlements
  #Entitlements:
    Entitlement:
      description: Entitlements are a representation of operations on objects within an application. An entitlement is thus inherently application-specific and the service provider is responsible to ensure a unique resource addressability by assigning a valid id. To represent it application-specificness, an unmodifyable application is assigned to this entitlement. An entitlement can be assigned to Accounts and to Roles. Furthermore, an entitlement can support inheritance with nested or parent entitlements. Additional, cardinalities specify on the amount of allowed user assignment. Activated session also may be returned.
      allOf:
        - $ref: '#/components/schemas/Resource'
      properties:
        displayName:
          type: string
          description: A human-readable name, primarily used for display purposes. OPTIONAL.
          example: Trainee Role
        enabled:
          type: boolean
          description: A boolean type that indicates if the entitlement is enabled and usable in the SCIM service provider's system.  REQUIRED.
          example: true
        limitedAssignmentsPermitted: 
          type: boolean
          description: "A boolean type that indicates if a limited number of users may be assigned this entitlement. A value of false should be interpreted as no numerical restriction on the number of users that may hold this entitlement. Other restrictions may exist.  RECOMMENDED."
          example: true
        totalAssignmentsPermitted:
          type: number
          description: "An integer type that indicates how many users may be assigned this entitlement, either directly or inherited. OPTIONAL, but RECOMMENDED if assignments are restricted to a certain number."
          example: 100
        totalAssignmentsUsed: 
          type: number
          description: "An integer type that indicates how many users are currently assigned this entitlement, either directly or inherited. OPTIONAL, but RECOMMENDED if assignments are restricted to a certain number."
          example: 42
        roles:
          description: Assigned Roles for this Entitlement.
          type: array
          items: 
            $ref: '#/components/schemas/RoleEntitlementAssignment'
        accounts:
          description: Assigned Accounts for this Entitlement (direct assignments).
          type: array
          items: 
            $ref: '#/components/schemas/EntitlementAccountAssignment'
        application:
            $ref: '#/components/schemas/EntitlementApplicationAssignment'
        contains:
          description: A list of \"child\" entitlements that this entitlement grants the rights of.  OPTIONAL.
          type: array
          items:
            $ref: '#/components/schemas/EntitlementEntitlementAssignment'
        containedBy:
          description: A list of \"parent\" entitlements that contain a superset of permissions including those granted by this entitlement. OPTIONAL.
          type: array
          items:
            $ref: '#/components/schemas/EntitlementEntitlementAssignment'
        sessions:
          description: Sessions for which this Entitlement is activated for.
          type: array
          items:
            $ref: '#/components/schemas/SessionEntitlementAssignment'
  #Account:
    Account:
      description: An Account is a reflection of the User for an Application. It is thus assigned to an Application and SHOULD be assigned to a User (unassigned Accounts are often refered to as orphan accounts). An Account can have directly assigned Entitlements and might be allowlisted in exceptional cases for SoDs.
      allOf:
        - $ref: '#/components/schemas/Resource'
      properties:
        user:
          $ref: '#/components/schemas/UserAccountAssignment'
        application:
          $ref: '#/components/schemas/ApplicationAccountAssignment'
        entitlements:
          description: These Entitlements are directly assigned to the Account.
          type: array
          items: 
            $ref: '#/components/schemas/EntitlementAccountAssignment'
        allowListSoDs:
          description: An Account might be exceptionally allowed to violate a SoD.
          type: array
          items:
            $ref: '#/components/schemas/SoDAccountAssignment'
  #Application:
    Application:
      description: An Application represents an information system utilizing Entitlements and Accounts. Especially the Entitlements are predefined by the Application while the Accounts are reflections of the Users.
      allOf:
        - $ref: '#/components/schemas/Resource'
      properties:
        entitlements:
          description: The assigned Entitlements are usually defined by the Application itself according to their use case.
          type: array
          items: 
            $ref: '#/components/schemas/EntitlementApplicationAssignment'
        accounts:
          description: The assigned Accounts are the reflection of Users which utilize the Application.
          type: array
          items: 
            $ref: '#/components/schemas/ApplicationAccountAssignment'
  #SoD
    SoD:
      description: A SoD (Separation of Duties) is a constraint for RBAC. It expresses a two-man-rule for disallowing a user to excert a toxic combination of Roles and Entitlements. A SoD can be enforced while altering assignments (static type) or on activating sessions (dynamic type). An exclusion list covers Roles and Entitlements, which cannot be assigned together. An allowList specifies selected exceptions for the exclusions encompassing Groups, Users, and Accounts.
      allOf:
        - $ref: '#/components/schemas/Resource'
      properties:
        exclusions: 
          description: Mutually exclusive roles and entitlements.
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/SoDRoleAssignment'
              - $ref: '#/components/schemas/SoDEntitlementAssignment'
        allowList: 
          description: Exceptions for the mutually exclusive roles and entitlements. 
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/SoDAccountAssignment'
              - $ref: '#/components/schemas/SoDUserAssignment'
              - $ref: '#/components/schemas/SoDGroupAssignment'
  #Session
    Session:
      description: Sessions are the activated Roles and Entitlements of a single User. Within this Session dynamic SoDs might be checked to enforce two-man-rules. On requiring access a User activates a Role or Entitlement for its Session by adding them to the Session resource. 
      allOf:
        - $ref: '#/components/schemas/Resource'
      properties:
        active: 
          description: The activated Roles and Entitlements for the Session.
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/SessionRoleAssignment'
              - $ref: '#/components/schemas/SessionEntitlementAssignment'
        user:
          $ref: '#/components/schemas/SessionUserAssignment'
  #RessourceType:
    ResourceType:
      description: The \"ResourceType\" schema specifies the metadata about a resource type. Resource type resources are READ-ONLY and identified using the following schema URI \"urn:ietf:params:scim:schemas:core:2.0:ResourceType\".  Unlike other core resources, all attributes are REQUIRED unless otherwise specified.  The \"id\" attribute is not required for the resource type resource.
      type: object
      properties:
        schemas:
          description: The schema(s) involved in the SCIM resource.
          type: array
          items:
            type: string
        id:
          description: The resource type's server unique id.This is often the same value as the \"name\" attribute.  OPTIONAL.
          type: string
          format: uuid
        name:
          description: The resource type name.  When applicable, service providers MUST specify the name, e.g., \"User\" or \"Group\".  This name is referenced by the \"meta.resourceType\" attribute in all resources. REQUIRED.
          type: string
        description:
          example: The resource type's human-readable description. When applicable, service providers MUST specify the description.  OPTIONAL.
          type: string
        endpoint:
          description: The resource type's HTTP-addressable endpoint relative to the Base URL of the service provider, e.g., \"Users\".  REQUIRED.
          type: string
          example: /User
        schema:
          description: The resource type's primary/base schema URI, e.g., \"urn:ietf:params:scim:schemas:core:2.0:User\".  This MUST be equal to the \"id\" attribute of the associated \"Schema\" resource. REQUIRED.
          type: array
          items:
            type: string
            example:
              urn:ietf:params:scim:schemas:core:2.0:ResourceType
        schemaExtensions:
          description: A list of URIs of the resource type's schema extensions. OPTIONAL.
          type: array
          items:
            type: object
            properties:
              schema:
                type: string
                description: The URI of an extended schema, e.g., \"urn:edu:2.0:Staff\". This MUST be equal to the \"id\" attribute of a \"Schema\" resource.  REQUIRED.
                example: urn:edu:2.0:Staff
              required:
                type: boolean
                description: A Boolean value that specifies whether or not the schema extension is required for the resource type.  If true, a resource of this type MUST include this schema extension and also include any attributes declared as required in this schema extension.  If false, a resource of this type MAY omit this schema extension.  REQUIRED.
                example: false
            required:
              - schema
              - required
      required:
        - name
        - endpoint
        - schema
  #Schema:
    Schema:
      description: "This section defines a way to specify the schema in use by resources available and accepted by a SCIM service provider.  For each \"schemas\" URI value, this schema specifies the defined attribute(s) and their characteristics (mutability, returnability, etc).  For every schema URI used in a resource object, there is a corresponding \"Schema\" resource.  \"Schema\" resources are not modifiable, and their associated attributes have a mutability of \"readOnly\".  Except for \"id\" (which is always returned), all attributes have a \"returned\" characteristic of \"default\".  Unless otherwise specified, all schema attributes are case insensitive.  These resources have a \"schemas\" attribute with the following schema URI
        <p>urn:ietf:params:scim:schemas:core:2.0:Schema</p>
        Unlike other core resources, the \"Schema\" resource MAY contain a complex object within a sub-attribute, and all attributes are REQUIRED unless otherwise specified."
      type: object
      properties:
        id:
          description: "The unique URI of the schema. When applicable, service providers MUST specify the URI, e.g., \"urn:ietf:params:scim:schemas:core:2.0:User\".  Unlike most other schemas, which use some sort of Globally Unique Identifier (GUID) for the \"id\", the schema \"id\" is a URI so that it can be registered and is portable between different service providers and clients."
          type: string
          example: "urn:ietf:params:scim:schemas:core:2.0:User"
        name:
          description: "The schema's human-readable name.  When applicable, service providers MUST specify the name, e.g., \"User\" or \"Group\"."
          type: string
          example: User
        description:
          description: "The schema's human-readable description. When applicable, service providers MUST specify the description."
          type: string
        attributes:
          description: "A list of attributes for this resource."
          type: array
          
          items:
            description: "A complex type that defines service provider attributes and their qualities via the following set of sub-attributes"
            properties:
              name:
                description: "The attribute's name."
                type: string
              type:
                description: "The attribute's data type.  Valid values are \"string\", \"boolean\", \"decimal\", \"integer\", \"dateTime\", \"reference\", and \"complex\".  When an attribute is of type \"complex\", there SHOULD be a corresponding schema attribute \"subAttributes\" defined, listing the sub-attributes of the attribute."
                type: string
                example: string
              subAttributes:
                description: "When an attribute is of type \"complex\", \"subAttributes\" defines a set of sub-attributes. \"subAttributes\" has the same schema sub-attributes as \"attributes\"."
                type: array
                items:
                  additionalProperties:
                    anyOf:
                      - type: object
              multiValued:
                description: "A Boolean value indicating the attribute's plurality."
                type: boolean
              description:
                description: "The attribute's human-readable description. When applicable, service providers MUST specify the description."
                type: string
              required:
                description: "A Boolean value that specifies whether or not the attribute is required."
                type: boolean
                example: false
              canonicalValues:
                description: "A collection of suggested canonical values that MAY be used (e.g., \"work\" and \"home\").  In some cases, service providers MAY choose to ignore unsupported values."
                type: array
                items:
                  type: string
                example:
                  - work
                  - home
              caseExact:
                description: "A Boolean value that specifies whether or not a string attribute is case sensitive.  The server SHALL use case sensitivity when evaluating filters. For attributes that are case exact, the server SHALL preserve case for any value submitted. If the attribute is case insensitive, the server MAY alter case for a submitted value. Case sensitivity also impacts how attribute values MAY be compared against filter values. See Section [3.4.2.2 of RFC7644}(https://www.rfc-editor.org/rfc/rfc7644#section-3.4.2.2))."
                type: boolean
                example: true
              mutability:
                description: "
                A single keyword indicating the circumstances under which the value of the attribute can be (re)defined
                <ul>
                  <li>`readOnly` - The attribute SHALL NOT be modified.</li>
                  <li>`readWrite` - The attribute MAY be updated and read at any time. This is the default value.</li>
                  <li>`immutable` - The attribute MAY be defined at resource creation (e.g., POST) or at record replacement via a request (e.g., a PUT).  The attribute SHALL NOT be updated.</li>
                  <li>`writeOnly` - The attribute MAY be updated at any time.  Attribute values SHALL NOT be returned (e.g., because the value is a stored hash).  Note An attribute with a mutability of \"writeOnly\" usually also has a returned setting of \"never\".</li>
                </ul>
                "
                type: string
                enum: 
                  - readOnly
                  - readWrite
                  - immutable
                  - writeOnly
                example: readWrite
              returned:
                description: "
                A single keyword that indicates when an attribute and associated values are returned in response to a GET request or in response to a PUT, POST, or PATCH request. Valid keywords are as follows
                <ul>
                  <li>`always` - The attribute is always returned, regardless of the contents of the \"attributes\" parameter.  For example, \"id\" is always returned to identify a SCIM resource.</li>
                  <li>`never` - The attribute is never returned.  This may occur because the original attribute value (e.g., a hashed value) is not retained by the service provider.  A service provider MAY allow attributes to be used in a search filter.</li>
                  <li>`default` - The attribute is returned by default in all SCIM operation responses where attribute values are returned.  If the GET request \"attributes\" parameter is specified, attribute values are only returned if the attribute is named in the \"attributes\" parameter.  DEFAULT.</li>
                  <li>`request` - The attribute is returned in response to any PUT, POST, or PATCH operations if the attribute was specified by the client (for example, the attribute was modified).  The attribute is returned in a SCIM query operation only if specified in the \"attributes\" parameter.</li>
                </ul>
                "
                type: string
                enum:
                  - always
                  - never
                  - default
                  - request
                example: default
              uniqueness:
                description: "
                A single keyword value that specifies how the service provider enforces uniqueness of attribute values.  A server MAY reject an invalid value based on uniqueness by returning HTTP response code 400 (Bad Request).  A client MAY enforce uniqueness on the client side to a greater degree than the service provider enforces. For example, a client could make a value unique while the server has uniqueness of \"none\".  Valid keywords are as follows
                <ul>
                  <li>`none` - The values are not intended to be unique in any way. DEFAULT.</li>
                  <li>`server` - The value SHOULD be unique within the context of the current SCIM endpoint (or tenancy) and MAY be globally unique (e.g., a \"username\", email address, or other server-generated key or counter).  No two resources on the same server SHOULD possess the same value.</li>
                  <li>`global` - The value SHOULD be globally unique (e.g., an email address, a GUID, or other value). No two resources on any server SHOULD possess the same value.</li>
                </ul>
                "
                type: string
                enum:
                  - none
                  - server
                  - global
                example: none
              referenceTypes: 
                description: "A multi-valued array of JSON strings that indicate the SCIM resource types that may be referenced. Valid values are as follows
                <ul>
                  <li>`ResourceType` (SCIM) (e.g., \"User\" or \"Group\")</li>
                  <li>`external` - indicating that the resource is an external resource (e.g., a photo)</li>
                  <li>`uri` - indicating that the reference is to a service endpoint or an identifier (e.g., a schema URN)</li>
                </ul>
                "
                type: array
                items: 
                  type: string
        meta:
          description: Metadata of the Schema.
          type: object
          properties:
            location:
              description: The location of the Schema.
              type: string
              example: >-
                http://localhost:8080/iiq/scim/v2/Schemas/7f0123417e941b00007f9db3702906cb
            version:
              description: The version of the Schema.
              type: string
              example: W"1647617443639"
            resourceType:
              description: The SCIM resource type.
              type: string
              example: Schema
        schemas:
          description: The schema for the Schema resource.
          type: array
          items:
            type: string
          example:
            - urn:ietf:params:scim:schemas:core:2.0:Schema
      required:
        - id
        - attributes
  #ServiceProviderConfig
    ServiceProviderConfig:
      description: "
        SCIM provides a schema for representing the service provider's configuration, identified using the following schema URI \"urn:ietf:params:scim:schemas:core:2.0:ServiceProviderConfig\".
        <br>
        The service provider configuration resource enables a service provider to discover SCIM specification features in a standardized form as well as provide additional implementation details to clients. All attributes have a mutability of \"readOnly\".  Unlike other core resources, the \"id\" attribute is not required for the service provider configuration resource.
      "
      required:
        - patch
        - etag
        - bulk
        - filter
        - changePassword
        - sort
        - authenticationSchemes
        - RolesAndEntitlements
        - rbacFeatures
      properties:
        schemas:
          description: The schema(s) involved in the SCIM resource.
          type: array
          items:
            type: string
        documentationUri:
          type: string
          example: "http://example.com/help/scim.html"
        patch:
          description: A complex type that specifies PATCH configuration options.
          type: object
          required:
            - supported
          properties:
            supported:
              type: boolean
              description: Boolean value specifying whether the operation is supported.
              example: false
        etag:
          description: A complex type that specifies ETAG configuration options.
          type: object
          required:
            - supported
          properties:
            supported:
              description: Boolean value specifying whether the operation is supported.
              type: boolean
        bulk:
          description: A complex type that specifies ETAG configuration options.
          type: object
          required:
            - supported
            - maxOperations
            - maxPayloadSize
          properties:
            supported:
              description: Boolean value specifying whether the operation is supported.
              type: boolean
              example: false
            maxOperations:
              description: An integer value specifying the maximum number of operations.
              type: integer
              example: 3
            maxPayloadSize:
              description: An integer value specifying the maximum payload size in bytes.
              type: integer
              example: 128
        filter:
          description: A complex type that specifies FILTER options.
          type: object
          required:
            - supported
            - maxResults
          properties:
            supported:
              description: Boolean value specifying whether the operation is supported.
              type: boolean
              example: true
            maxResults:
              description: >-
                Integer value specifying the maximum number of resources
                returned in a response.
              type: integer
              example: 10
        changePassword:
          description: A complex type that specifies change password options.
          type: object
          required:
            - supported
          properties:
            supported:
              description: Boolean value specifying whether the operation is supported.
              type: boolean
              example: false
        sort:
          description: A complex type that specifies sort result options.
          type: object
          required:
            - supported
          properties:
            supported:
              description: Boolean value specifying whether the operation is supported.
              type: boolean
              example: false
        authenticationSchemes:
          description: >-
            A complex type that specifies supported Authentication Scheme
            properties.
          type: object
          required:
            - name
            - description
            - type
          properties:
            name:
              description: The common authentication scheme name; e.g., HTTP Basic.
              type: string
              example: HTTP Basic
            description:
              description: A description of the authentication scheme.
              type: string
              example: Authentication Scheme using the Http Basic Standard.
            specUri:
              description: >-
                An HTTP addressable URL pointing to the Authentication Scheme's
                specification.
              type: string
              example: http://www.ietf.org/rfc/rfc2617.txt
            documentationUri:
              description: >-
                An HTTP addressable URL pointing to the Authentication Scheme's
                usage documentation.
              type: string
              example: >-
                https://example.com/documentationUri
            type:
              type: string
              description: The authentication scheme.
              enum:
                - oauth
                - oauth2
                - oauthbearertoken
                - httpbasic
                - httpdigest
              example: oauthbearertoken
        RolesAndEntitlements:
          type: object
          description: "SCIM endpoints that have implemented one or both of the endpoints from this extension MUST advertise which elements are implemented in the ServiceProviderConfig endpoint as defined.<br> Please refer to the SCIM extension for roles and entitlement by Zollner on IETF: [Link](https://datatracker.ietf.org/doc/html/draft-zollner-scim-roles-entitlements-extension-02)"
          properties:
            roles:
              type: object
              description: "A complex type that specifies Roles and Entitlements extension configuration options."
              properties:
                enabled: 
                  type: boolean
                  description: "A boolean type that indicates if the SCIM service provider supports the /Roles endpoint defined in this extension."
                multipleRolesSupported:
                  type: boolean
                  description: "A boolean type that indicates if the SCIM service provider supports multiple values for the \"roles\" attribute on the User resource."
                primarySupported:
                  type: boolean
                  description: "A boolean type that indicates if the SCIM service provider supports the \"primary\" sub-attribute for the \"roles\" attribute on the User resource."
                typeSupported:
                  type: boolean
                  description: "A boolean type that indicates if the SCIM service provider supports the \"type\" sub-attribute for the \"roles\" attribute on the User resource."
            entitlements:
              type: object
              description: "A complex type that specifies configuration options related to the Entitlements resource type."
              properties:
                enabled: 
                  type: boolean
                  description: "A boolean type that indicates if the SCIM service provider supports the /Entitlements endpoint defined in this extension."
                multipleEntitlementsSupported:
                  type: boolean
                  description: "A boolean type that indicates if the SCIM service provider supports multiple values for the \"entitlements\" attribute on the User resource."
                primarySupported:
                  type: boolean
                  description: "A boolean type that indicates if the SCIM service provider supports the \"primary\" sub-attribute for the \"entitlements\" attribute on the User resource."
                typeSupported:
                  type: boolean
                  description: "A boolean type that indicates if the SCIM service provider supports the \"type\" sub-attribute for the \"entitlements\" attribute on the User resource."
          required:
            - roles
            - entitlements
        rbacFeatures:
          type: object
          description: "This setting defines which RBAC features are supported by the servie provider."
          properties:
            sessionsSupported:
              type: boolean
              example: false
              description: "Determine the support for RBAC session. Alongside activating and deactivating roles and entitlements for users. Disabling this also makes dynamic SoDs not feasible."
            hierarchicalRbacSupported:
              type: boolean
              example: true
              description: "Enables hierarchies for roles and entitlements."
            staticSodSupported:
              type: boolean
              example: true
              description: "Enables static Separation of Duties (SoDs). These are checked every time assignments change."
            dynamicSodSupported:
              type: boolean
              example: false
              description: "Enables static Separation of Duties (SoDs). These are checked every time a role or entitlement gets activated for a session."
          required:
            - sessionsSupported
            - hierarchicalRbacSupported
            - staticSodSupported
            - dynamicSodSupported
        meta:
          description: Metadata of the resource.
          properties:
            resourceType:
              description: The SCIM resource type.
              type: string
              #$ref: '#/components/schemas/ResourceType'
            created:
              description: Datetime this resource was created.
              type: string
              format: date-time
              example: '2022-02-11T01:34:04.074-05:00'
            lastModified:
              description: Datetime the resource was last modified.
              type: string
              format: date-time
              example: '2022-02-11T01:08:45.866-05:00'
            version:
              description: The version of the resource.
              type: string
            location:
              description: The location of the resource.
              type: string
              format: link
              example: 'https://example.com/v2/ServiceProviderConfig'
  #Assignments:
    RoleUserAssignment:
      allOf:
        - $ref: '#/components/schemas/Assignment'
    RoleEntitlementAssignment:
      allOf:
        - $ref: '#/components/schemas/Assignment'
    RoleRoleAssignment:
      allOf:
        - $ref: '#/components/schemas/Assignment'
    EntitlementAccountAssignment:
      allOf:
        - $ref: '#/components/schemas/Assignment'
    EntitlementEntitlementAssignment:
      allOf:
        - $ref: '#/components/schemas/Assignment'
    EntitlementApplicationAssignment:
      allOf:
        - $ref: '#/components/schemas/Assignment'
    ApplicationAccountAssignment:
      allOf:
        - $ref: '#/components/schemas/Assignment'
    UserGroupAssignment:
      allOf:
        - $ref: '#/components/schemas/Assignment'
      properties:
        membership:
          type: string
          enum:
            - direct
            - indirect
    UserAccountAssignment:
      allOf:
        - $ref: '#/components/schemas/Assignment'
    GroupGroupAssignment:
      allOf:
        - $ref: '#/components/schemas/Assignment'
    SoDRoleAssignment:
      allOf:
        - $ref: '#/components/schemas/Assignment'
    SoDEntitlementAssignment:
      allOf:
        - $ref: '#/components/schemas/Assignment'
    SoDAccountAssignment:
      allOf:
        - $ref: '#/components/schemas/Assignment'
    SoDUserAssignment:
      allOf:
        - $ref: '#/components/schemas/Assignment'
    SoDGroupAssignment:
      allOf:
        - $ref: '#/components/schemas/Assignment'
    SessionRoleAssignment:
      allOf:
        - $ref: '#/components/schemas/Assignment'
    SessionEntitlementAssignment:
      allOf:
        - $ref: '#/components/schemas/Assignment'
    SessionUserAssignment:
      allOf:
        - $ref: '#/components/schemas/Assignment'
  #ListResponse
    ListResponse:
      description: The ListResponse specifies control attribute for big collections returned. The attributes thus cover information about the pagination. The assigned Resource object contains the queried resources.
      type: object
      properties:
        totalResults:
          type: integer
          format: int32
          description: Non-negative integer. Specifies the total number of results matching the client query, e.g., 1000.
          example: 1000
        startIndex:
          type: integer
          format: int32
          description: The 1-based index of the first result in the current set of query results, e.g., 1.
          example: 1
        itemsPerPage:
          type: integer
          format: int32
          description: Non-negative integer. Specifies the number of query results returned in a query response page, e.g., 10. 
          example: 10
      required:
        - totalResults
        - startIndex
        - itemsPerPage
  #GeneralListResponse
    GeneralListResponse:
      allOf:
        - $ref: '#/components/schemas/ListResponse'
      properties:
        Resource:
          type: array
          items:
            oneOf: 
              - $ref: '#/components/schemas/User'
              - $ref: '#/components/schemas/Group'
              - $ref: '#/components/schemas/Role'
              - $ref: '#/components/schemas/Entitlement'
              - $ref: '#/components/schemas/Account'
              - $ref: '#/components/schemas/Application'
              - $ref: '#/components/schemas/Session'
              - $ref: '#/components/schemas/SoD'
      required:
        - Resource
  #UserListResponse:
    UserListResponse:
      allOf:
        - $ref: '#/components/schemas/ListResponse'
      properties:
        Resource:
          type: array
          items:
            $ref: '#/components/schemas/User'
      required:
        - Resource
  #GroupListResponse:
    GroupListResponse:
      allOf:
        - $ref: '#/components/schemas/ListResponse'
      properties:
        Resource:
          type: array
          items:
            $ref: '#/components/schemas/Group'
      required:
        - Resource
  #RoleListResponse:
    RoleListResponse:
      allOf:
        - $ref: '#/components/schemas/ListResponse'
      properties:
        Resource:
          type: array
          items:
            $ref: '#/components/schemas/Role'
      required:
        - Resource
  #ApplicationListResponse:
    ApplicationListResponse:
      allOf:
        - $ref: '#/components/schemas/ListResponse'
      properties:
        Resource:
          type: array
          items:
            $ref: '#/components/schemas/Application'
      required:
        - Resource
  #EntitlementListResponse:
    EntitlementListResponse:
      allOf:
        - $ref: '#/components/schemas/ListResponse'
      properties:
        Resource:
          type: array
          items:
            $ref: '#/components/schemas/Entitlement'
      required:
        - Resource
  #AccountListResponse:
    AccountListResponse:
      allOf:
        - $ref: '#/components/schemas/ListResponse'
      properties:
        Resource:
          type: array
          items:
            $ref: '#/components/schemas/Account'
      required:
        - Resource
  #SoDListResponse:
    SoDListResponse:
      allOf:
        - $ref: '#/components/schemas/ListResponse'
      properties:
        Resource:
          type: array
          items:
            $ref: '#/components/schemas/SoD'
      required:
        - Resource
  #SessionListResponse:
    SessionListResponse:
      allOf:
        - $ref: '#/components/schemas/ListResponse'
      properties:
        Resource:
          type: array
          items:
            $ref: '#/components/schemas/Session'
      required:
        - Resource
  #SchemasListResponse:
    SchemasListResponse:
      allOf:
        - $ref: '#/components/schemas/ListResponse'
      properties:
        Resource:
          type: array
          items:
            $ref: '#/components/schemas/Schema'
      required:
        - Resource
  #ResTypeListResponse:
    ResourceTypeListResponse:
      allOf:
        - $ref: '#/components/schemas/ListResponse'
      properties:
        Resource:
          type: array
          items:
            $ref: '#/components/schemas/ResourceType'
      required:
        - Resource
  #Error
    Error:
      type: object
      description: The SCIM protocol uses the HTTP response status codes defined in Section 6 of [RFC7231] to indicate operation success or failure.  In addition to returning an HTTP response code, implementers MUST return the errors in the body of the response in a JSON format, using the attributes described below.  Error responses are identified using the following \"schema\" URI \"urn:ietf:params:scim:api:messages:2.0:Error\".  The following attributes are defined for a SCIM error response using a JSON body
      properties:
        schemas:
          type: array
          items:
            type: string
          description: Schema for the error response
          example:
            - "urn:ietf:params:scim:api:messages:2.0:Error"
        scimType:
          type: string
          nullable: true
          enum:
            - invalidFilter
            - tooMany
            - uniqueness
            - mutability
            - invalidSyntax
            - invalidPath
            - noTarget
            - invalidValue
            - invalidVers
            - sensitive
            - sodViolation
          description: "
            A SCIM detail error keyword. OPTIONAL.
            <ul>
                <li>`invalidFilter` - The specified filter syntax was invalid, or the specified attribute and filter comparison combination is not supported.</li>
                <li>`tooMany` - The specified filter yields many more results than the server is willing to calculate or process. For example, a filter such as \"(userName pr)\" by itself would return all entries with a \"userName\" and MAY not be acceptable to the service provider. </li>
                <li>`uniqueness` - One or more of the attribute values are already in use or are reserved.</li>
                <li>`mutability` - The attempted modification is not compatible with the target attribute's mutability or current state (e.g., modification of an \"immutable\" attribute with an existing value).</li>
                <li>`invalidSyntax` - The request body message structure was invalid or did not conform to the request schema.</li>
                <li>`invalidPath` - The \"path\" attribute was invalid or malformed.</li>
                <li>`noTarget` - The specified \"path\" did not yield an attribute or attribute value that could be operated on. This occurs when the specified \"path\" value contains a filter that yields no match.</li>
                <li>`invalidValue` - A required value was missing, or the value specified was not compatible with the operation or attribute type (see [Section 2.2 of RFC7643](https://www.rfc-editor.org/rfc/rfc7643#section-2.2)), or resource schema (see [Section 4 of RFC7643](https://www.rfc-editor.org/rfc/rfc7644.html#section-4)).</li>
                <li>`invalidVers` - The specified SCIM protocol version is not supported (see [Section 3.13 of RFC7644](https://www.rfc-editor.org/rfc/rfc7644.html#section-3.13)).</li>
                <li>`sensitive` - The specified request cannot be completed, due to the passing of sensitive (e.g., personal) information in a request URI.  For example, personal information SHALL NOT be transmitted over request URIs.  See [Section 7.5.2. of RFC7644](https://www.rfc-editor.org/rfc/rfc7644.html#section-7.5.2). </li>
                <li>`sodViolation` - A SoD rule is violated. Either by anactivation of a Role or Entitlment for a User's Session or by making an assignment (static).</li>
            </ul>
          "
          example: "mutability"
        detail:
          type: string
          nullable: false
          description: A detailed human-readable message. OPTIONAL.
          example: "Attribute 'id' is readOnly"
        status:
          type: integer
          minimum: 100
          maximum: 599
          description: The HTTP status code (see Section 6 of [RFC7231]) expressed as a JSON string.  REQUIRED.
          example: 400
      required:
        - schemas
        - status
  #PatchOp
    PatchOp:
      type: object
      description: A JSONPatch document as defined by RFC 6902
      required:
       - op
       - path
       #- value
      properties:
        Operations:
          description: PATCH-operations array
          type: array
          items:
            properties:
              op:
                description: operation type (add, remove, replace)
                type: string
                enum:
                  - add
                  - remove
                  - replace
              path: 
                type: string 
                description: A JSON-Pointer 
              value: 
                type: object 
                description: The value to be used within the operations.
            required:
              - op
              - path
  #BulkOperation
    BulkOperation:
      description: Defines operations within a bulk job.  Each operation corresponds to a single HTTP request against a resource endpoint.  REQUIRED.
      type: object
      required:
        - method
      properties:
        method:
          type: string
          enum:
            - POST
            - PUT
            - PATCH
            - DELETE
          example: PUT
          description: The HTTP method of the current operation.  Possible values are \"POST\", \"PUT\", \"PATCH\", or \"DELETE\".  REQUIRED.
        bulkId:
          type: string
          example: qwerty
          description: The transient identifier of a newly created resource, unique within a bulk request and created by the client.  The bulkId serves as a surrogate resource id enabling clients to uniquely identify newly created resources in the response and cross-reference new resources in and across operations within a bulk request.  REQUIRED when \"method\" is \"POST\".
        version: 
          type: string
          example: W/wGB85s2QJMjiNnuI
          description: The current resource version.  Version MAY be used if the service provider supports entity-tags (ETags) [Section 2.3 of RFC7232](https://www.rfc-editor.org/rfc/rfc7232#section-2.3) and \"method\" is \"PUT\", \"PATCH\", or \"DELETE\".
        path:
          type: string
          example: /Users/2819c223-7f76-453a-919d-413861904646
          description: The resource's relative path to the SCIM service provider's root.  If \"method\" is \"POST\", the value must specify a resource type endpoint, e.g., /Users or /Groups, whereas all other \"method\" values must specify the path to a specific resource, e.g., /Users/2819c223-7f76-453a-919d-413861904646.  REQUIRED in a request.
        data:
          oneOf:
            - $ref: '#/components/schemas/User'
            - $ref: '#/components/schemas/Group'
            - $ref: '#/components/schemas/Role'
            - $ref: '#/components/schemas/Entitlement'
            - $ref: '#/components/schemas/Account'
            - $ref: '#/components/schemas/Application'
            - $ref: '#/components/schemas/Session'
            - $ref: '#/components/schemas/SoD'
          description: The resource data as it would appear for a single SCIM POST, PUT, or PATCH operation.  REQUIRED in a request when \"method\" is \"POST\", \"PUT\", or \"PATCH\".
        location:
          type: string
          example: https://example.com/v2/Users/2819c223-7f76-453a-919d-413861904646
          description: The resource endpoint URL.  REQUIRED in a response, except in the event of a POST failure.
        response:
          type: object
          description: The HTTP response body for the specified request operation.  When indicating a response with an HTTP status other than a 200-series response, the response body MUST be included.  For normal completion, the server MAY elect to omit the response body.
          allOf:
            - $ref: '#/components/schemas/Error'
        status:
          type: integer
          example: 200
          description: The HTTP response status code for the requested operation. When indicating an error, the \"response\" attribute MUST contain the detail error response as per [Section 3.12 RFC7644](https://www.rfc-editor.org/rfc/rfc7644.html#section-3.12).

  #BulkRequest
    BulkRequest:
      type: object
      required:
        - Operations
      properties:
        schemas:
          type: array
          items:
            type: string
          default: urn:ietf:params:scim:api:messages:2.0:BulkRequest
        failOnErrors:
          type: integer
          example: 5
          description: An integer specifying the number of errors that the service provider will accept before the operation is terminated and an error response is returned.  OPTIONAL in a request.  Not valid in a response.
        Operations:
          required:
            - path
            - data
          allOf: 
            - $ref: '#/components/schemas/BulkOperation'
            - type: object

  #BulkResponse
    BulkResponse:
      required:
        - Operations
      properties:
        schemas:
          type: array
          items:
            type: string
          default: urn:ietf:params:scim:api:messages:2.0:BulkResponse
        Operations:
          allOf: 
            - $ref: '#/components/schemas/BulkOperation'
            - type: object
  #SearchRequest
    SearchRequest:
      description: Clients MAY execute queries without passing parameters on the URL by using the HTTP POST verb combined with the \"/.search\" path extension. The inclusion of \"/.search\" on the end of a valid SCIM endpoint SHALL be used to indicate that the HTTP POST verb is intended to be a query operation. <p> To create a new query result set, a SCIM client sends an HTTP POST request to the desired SCIM resource endpoint (ending in \"/.search\"). The body of the POST request MAY include any of the parameters defined in [Section 3.4.2 of RFC7644](https://datatracker.ietf.org/doc/html/rfc7644#section-3.4.2).
      required:
        - schemas
      properties:
        schemas:
          type: array
          items:
            type: string
          example: urn:ietf:params:scim:api:messages:2.0:SearchRequest
          description: Query requests MUST be identified using the following URI \"urn:ietf:params:scim:api:messages:2.0:SearchRequest\".
        attributes:
          type: string
          example: id
          description: A multi-valued list of strings indicating the names of resource attributes to return in the response, overriding the set of attributes that would be returned by default.  Attribute names MUST be in standard attribute notation ([Section 3.10 of RFC7644](https://datatracker.ietf.org/doc/html/rfc7644#section-3.10)) form.  See [Section 3.9 of RFC7644](https://datatracker.ietf.org/doc/html/rfc7644#section-3.9) for additional retrieval query parameters.  OPTIONAL.  
        excludedAttributes:
          type: string
          example: schema,meta
          description: A multi-valued list of strings indicating the names of resource attributes to be removed from the default set of attributes to return.  This parameter SHALL have no effect on attributes whose schema \"returned\" setting is \"always\" (see Sections [2.2](https://datatracker.ietf.org/doc/html/rfc7644#section-2.2) and [7](https://datatracker.ietf.org/doc/html/rfc7644#section-7) of [RFC7643](https://datatracker.ietf.org/doc/html/rfc7643)).  Attribute names MUST be in standard attribute notation ([Section 3.10 of RFC7644](https://datatracker.ietf.org/doc/html/rfc7644#section-3.10)) form.  See [Section 3.9 of RFC7644](https://datatracker.ietf.org/doc/html/rfc7644#section-3.9) for additional retrieval query parameters.  OPTIONAL.
        filter:
          type: string
          example: filter=meta.lastModified gt "2011-05-13T04:42:34Z"
          description: The filter string used to request a subset of resources.  The filter string MUST be a valid filter ([Section 3.4.2.2 of RFC7644](https://datatracker.ietf.org/doc/html/rfc7644#section-3.4.2.2)) expression. OPTIONAL.
        sortBy:
          type: string
          example: id
          description: A string indicating the attribute whose value SHALL be used to order the returned responses.  The \"sortBy\" attribute MUST be in standard attribute notation ([Section 3.10 of RFC7644](https://datatracker.ietf.org/doc/html/rfc7644#section-3.10)) form.  See [Section 3.4.2.3 of RFC7643](https://datatracker.ietf.org/doc/html/rfc7644#section-3.4.2.3).  OPTIONAL.
        sortOrder:
          type: string
          example: descending
          default: ascending
          enum:
            - ascending
            - descending
          description: A string indicating the order in which the \"sortBy\" parameter is applied.  Allowed values are \"ascending\" and \"descending\".  See [Section 3.4.2.3 of RFC7644](https://datatracker.ietf.org/doc/html/rfc7644#section-3.4.2.3).  OPTIONAL.
        startIndex:
          type: integer
          example: 1
          default: 1
          description: An integer indicating the 1-based index of the first query result.  See [Section 3.4.2.4 of RFC7644](https://datatracker.ietf.org/doc/html/rfc7644#section-3.4.2.4).  OPTIONAL.
        count:
          type: integer
          example: 1000
          default: 1000
          description: An integer indicating the desired maximum number of query results per page.  See [Section 3.4.2.4 of RFC7644](https://datatracker.ietf.org/doc/html/rfc7644#section-3.4.2.4).  OPTIONAL.
  #Security
  securitySchemes:
    rbac_scim_auth:
      type: oauth2
      flows:
        clientCredentials:
          tokenUrl: 'http://api.example.com/v2/oauth/authorize'
          scopes:
            'create:users': create users
            'create:groups': create groups
            'create:roles': create roles
            'create:applications': create applications
            'create:entitlements': create entitlements
            'create:accounts': create accounts
            'create:sods': create sods
            'create:sessions': create sessions

            'read:users': read users
            'read:groups': read groups
            'read:roles': read roles
            'read:applications': read applications
            'read:entitlements': read entitlements
            'read:accounts': read accounts
            'read:sods': read sods
            'read:sessions': read sessions
            'read:schemas': read schemas
            'read:spcs': read spcs
            'read:resTypes': read resTypes

            'update:users': update users
            'update:groups': update groups
            'update:roles': update roles
            'update:applications': update applications
            'update:entitlements': update entitlements
            'update:accounts': update accounts
            'update:sods': update sods
            'update:sessions': update sessions

            'delete:users': delete users
            'delete:groups': delete groups
            'delete:roles': delete roles
            'delete:applications': delete applications
            'delete:entitlements': delete entitlements
            'delete:accounts': delete accounts
            'delete:sods': delete sods
            'delete:sessions': delete sessions
            
            'cud:bulk': bulk requests
